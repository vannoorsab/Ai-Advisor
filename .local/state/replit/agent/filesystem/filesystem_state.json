{"file_contents":{"README.md":{"content":"# AI Career Advisor India\n\nA comprehensive AI-powered career guidance platform designed specifically for the Indian job market. The platform provides personalized career recommendations, skill-based matching, structured learning roadmaps, and progress tracking to help professionals navigate their career journey.\n\n## üåü Features\n\n- **Firebase Authentication**: Email/password and Google OAuth integration\n- **Multi-step Onboarding**: Comprehensive profile setup with interests and resume upload\n- **AI-Powered Career Matching**: Uses embeddings and cosine similarity for accurate job matching\n- **Resume Analysis**: Automated skill extraction and parsing using pdf-parse\n- **Personalized Roadmaps**: AI-generated learning paths with milestones and resources\n- **Progress Tracking**: Monitor learning progress and skill development\n- **Offline Support**: IndexedDB caching with sync capabilities\n- **Indian Market Focus**: Salary ranges in INR, local companies, and relevant opportunities\n\n## üöÄ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Tailwind CSS** for styling with shadcn/ui components\n- **Wouter** for client-side routing\n- **TanStack Query** for state management and API calls\n- **Firebase SDK** for authentication and storage\n- **IndexedDB** for offline caching\n\n### Backend\n- **Node.js** with Express.js\n- **Firebase Admin SDK** for server-side operations\n- **Firestore** as the primary database\n- **Firebase Storage** for resume files\n- **Google Gemini AI** for embeddings and roadmap generation\n- **pdf-parse** for resume processing\n\n### AI/ML Services\n- **Google Vertex AI Embeddings** (with OpenAI fallback)\n- **Gemini 2.5 Pro** for structured roadmap generation\n- **Cosine similarity** for career matching\n- **Custom matching engine** with skill gap analysis\n\n## üìã Prerequisites\n\nBefore running this project, make sure you have:\n\n- Node.js 18+ installed\n- A Firebase project set up\n- Google Cloud project with Vertex AI enabled (for embeddings)\n- Gemini API key or OpenAI API key\n\n## üõ†Ô∏è Setup Instructions\n\n### 1. Clone and Install Dependencies\n\n```bash\ngit clone <repository-url>\ncd ai-career-advisor-india\nnpm install\n","size_bytes":2164},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\n// Import route modules\nimport authRoutes from './routes/auth';\nimport profileRoutes from './routes/profile';\nimport matchingRoutes from './routes/matching';\nimport roadmapRoutes from './routes/roadmap';\nimport uploadRoutes from './routes/upload';\n\n// Import services and middleware\nimport { authenticateToken } from './middleware/auth';\nimport { firestoreService } from './services/firestoreService';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      service: 'AI Career Advisor API'\n    });\n  });\n\n  // API Routes - prefix all routes with /api\n  app.use('/api/auth', authRoutes);\n  app.use('/api/profile', profileRoutes);\n  app.use('/api/match', matchingRoutes);\n  app.use('/api/roadmap', roadmapRoutes);\n  app.use('/api/upload', uploadRoutes);\n\n  // Learning resources endpoint\n  app.get('/api/learning-resources', async (req, res) => {\n    try {\n      const skills = req.query.skills as string;\n      const skillsArray = skills ? skills.split(',').map(s => s.trim()) : [];\n      const limit = Math.min(parseInt(req.query.limit as string) || 20, 50);\n      \n      const resources = await firestoreService.getLearningResources(skillsArray, limit);\n      res.json(resources);\n    } catch (error) {\n      console.error('Error fetching learning resources:', error);\n      res.status(500).json({ \n        message: 'Failed to fetch learning resources',\n        error: error.message \n      });\n    }\n  });\n\n  // Global error handling middleware\n  app.use((err: any, req: any, res: any, next: any) => {\n    console.error('API Error:', {\n      path: req.path,\n      method: req.method,\n      error: err.message,\n      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n    });\n\n    // Handle specific error types\n    if (err.name === 'ValidationError') {\n      return res.status(400).json({\n        message: 'Validation error',\n        errors: err.errors\n      });\n    }\n\n    if (err.name === 'UnauthorizedError' || err.status === 401) {\n      return res.status(401).json({\n        message: 'Unauthorized access',\n        error: 'UNAUTHORIZED'\n      });\n    }\n\n    if (err.name === 'ForbiddenError' || err.status === 403) {\n      return res.status(403).json({\n        message: 'Access forbidden',\n        error: 'FORBIDDEN'\n      });\n    }\n\n    // Default error response\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || 'Internal Server Error';\n\n    res.status(status).json({\n      message,\n      error: process.env.NODE_ENV === 'development' ? err.stack : 'INTERNAL_ERROR'\n    });\n  });\n\n  // 404 handler for API routes\n  app.use('/api/*', (req, res) => {\n    res.status(404).json({\n      message: 'API endpoint not found',\n      error: 'NOT_FOUND',\n      path: req.path\n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":3072},"server/storage.ts":{"content":"import { firestoreService } from './services/firestoreService';\nimport { \n  type User, \n  type InsertUser, \n  type UserProfile, \n  type InsertUserProfile,\n  type Career,\n  type InsertCareer,\n  type CareerMatch,\n  type InsertCareerMatch,\n  type Roadmap,\n  type InsertRoadmap,\n  type UserProgress,\n  type InsertUserProgress,\n  type LearningResource\n} from \"@shared/schema\";\n\n// Storage interface that integrates with Firestore\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User>;\n  \n  // User Profile operations\n  getUserProfile(userId: string): Promise<UserProfile | undefined>;\n  createUserProfile(profile: InsertUserProfile): Promise<UserProfile>;\n  updateUserProfile(userId: string, data: Partial<UserProfile>): Promise<UserProfile>;\n  \n  // Career operations\n  getCareers(limit?: number): Promise<Career[]>;\n  getCareerById(id: string): Promise<Career | undefined>;\n  createCareer(career: InsertCareer): Promise<Career>;\n  \n  // Career Match operations\n  getUserCareerMatches(userId: string, limit?: number): Promise<CareerMatch[]>;\n  createCareerMatch(match: InsertCareerMatch): Promise<CareerMatch>;\n  deleteUserCareerMatches(userId: string): Promise<void>;\n  \n  // Roadmap operations\n  getUserRoadmaps(userId: string): Promise<Roadmap[]>;\n  createRoadmap(roadmap: InsertRoadmap): Promise<Roadmap>;\n  getRoadmapById(id: string): Promise<Roadmap | undefined>;\n  updateRoadmap(id: string, data: Partial<Roadmap>): Promise<Roadmap>;\n  \n  // User Progress operations\n  getUserProgress(userId: string, roadmapId: string): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(id: string, data: Partial<UserProgress>): Promise<UserProgress>;\n  \n  // Learning Resources operations\n  getLearningResources(skills?: string[], limit?: number): Promise<LearningResource[]>;\n  \n  // Analytics operations\n  getUserStats(userId: string): Promise<{\n    careerMatches: number;\n    roadmapProgress: number;\n    skillsAcquired: number;\n  }>;\n  getUserActivity(userId: string, limit?: number): Promise<any[]>;\n}\n\n// Firestore-based storage implementation\nexport class FirestoreStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const user = await firestoreService.getUserById(id);\n    return user || undefined;\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const user = await firestoreService.getUserByFirebaseUid(firebaseUid);\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    return await firestoreService.createUser(user);\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    return await firestoreService.updateUser(id, data);\n  }\n\n  // User Profile operations\n  async getUserProfile(userId: string): Promise<UserProfile | undefined> {\n    const profile = await firestoreService.getUserProfile(userId);\n    return profile || undefined;\n  }\n\n  async createUserProfile(profile: InsertUserProfile): Promise<UserProfile> {\n    return await firestoreService.createUserProfile(profile);\n  }\n\n  async updateUserProfile(userId: string, data: Partial<UserProfile>): Promise<UserProfile> {\n    return await firestoreService.updateUserProfile(userId, data);\n  }\n\n  // Career operations\n  async getCareers(limit: number = 50): Promise<Career[]> {\n    return await firestoreService.getCareers(limit);\n  }\n\n  async getCareerById(id: string): Promise<Career | undefined> {\n    const career = await firestoreService.getCareerById(id);\n    return career || undefined;\n  }\n\n  async createCareer(career: InsertCareer): Promise<Career> {\n    return await firestoreService.createCareer(career);\n  }\n\n  // Career Match operations\n  async getUserCareerMatches(userId: string, limit: number = 10): Promise<CareerMatch[]> {\n    return await firestoreService.getUserCareerMatches(userId, limit);\n  }\n\n  async createCareerMatch(match: InsertCareerMatch): Promise<CareerMatch> {\n    return await firestoreService.createCareerMatch(match);\n  }\n\n  async deleteUserCareerMatches(userId: string): Promise<void> {\n    await firestoreService.deleteUserCareerMatches(userId);\n  }\n\n  // Roadmap operations\n  async getUserRoadmaps(userId: string): Promise<Roadmap[]> {\n    return await firestoreService.getUserRoadmaps(userId);\n  }\n\n  async createRoadmap(roadmap: InsertRoadmap): Promise<Roadmap> {\n    return await firestoreService.createRoadmap(roadmap);\n  }\n\n  async getRoadmapById(id: string): Promise<Roadmap | undefined> {\n    const roadmap = await firestoreService.getRoadmapById(id);\n    return roadmap || undefined;\n  }\n\n  async updateRoadmap(id: string, data: Partial<Roadmap>): Promise<Roadmap> {\n    return await firestoreService.updateRoadmap(id, data);\n  }\n\n  // User Progress operations\n  async getUserProgress(userId: string, roadmapId: string): Promise<UserProgress[]> {\n    return await firestoreService.getUserProgress(userId, roadmapId);\n  }\n\n  async createUserProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    return await firestoreService.createUserProgress(progress);\n  }\n\n  async updateUserProgress(id: string, data: Partial<UserProgress>): Promise<UserProgress> {\n    return await firestoreService.updateUserProgress(id, data);\n  }\n\n  // Learning Resources operations\n  async getLearningResources(skills: string[] = [], limit: number = 20): Promise<LearningResource[]> {\n    return await firestoreService.getLearningResources(skills, limit);\n  }\n\n  // Analytics operations\n  async getUserStats(userId: string): Promise<{\n    careerMatches: number;\n    roadmapProgress: number;\n    skillsAcquired: number;\n  }> {\n    return await firestoreService.getUserStats(userId);\n  }\n\n  async getUserActivity(userId: string, limit: number = 10): Promise<any[]> {\n    return await firestoreService.getUserActivity(userId, limit);\n  }\n}\n\n// Export the storage instance\nexport const storage = new FirestoreStorage();\n\n// Legacy MemStorage class (kept for compatibility but not used)\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private profiles: Map<string, UserProfile>;\n  private careers: Map<string, Career>;\n\n  constructor() {\n    this.users = new Map();\n    this.profiles = new Map();\n    this.careers = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.firebaseUid === firebaseUid);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = crypto.randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error('User not found');\n    \n    const updatedUser = { ...user, ...data, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Implement other methods with similar in-memory logic\n  async getUserProfile(userId: string): Promise<UserProfile | undefined> {\n    return Array.from(this.profiles.values()).find(profile => profile.userId === userId);\n  }\n\n  async createUserProfile(profile: InsertUserProfile): Promise<UserProfile> {\n    const id = crypto.randomUUID();\n    const newProfile: UserProfile = { \n      ...profile, \n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.profiles.set(id, newProfile);\n    return newProfile;\n  }\n\n  async updateUserProfile(userId: string, data: Partial<UserProfile>): Promise<UserProfile> {\n    const profile = Array.from(this.profiles.values()).find(p => p.userId === userId);\n    if (!profile) throw new Error('Profile not found');\n    \n    const updatedProfile = { ...profile, ...data, updatedAt: new Date() };\n    this.profiles.set(profile.id, updatedProfile);\n    return updatedProfile;\n  }\n\n  async getCareers(limit: number = 50): Promise<Career[]> {\n    return Array.from(this.careers.values()).slice(0, limit);\n  }\n\n  async getCareerById(id: string): Promise<Career | undefined> {\n    return this.careers.get(id);\n  }\n\n  async createCareer(career: InsertCareer): Promise<Career> {\n    const id = crypto.randomUUID();\n    const newCareer: Career = { \n      ...career, \n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.careers.set(id, newCareer);\n    return newCareer;\n  }\n\n  // Stub implementations for other methods (would need full implementation in production)\n  async getUserCareerMatches(): Promise<CareerMatch[]> { return []; }\n  async createCareerMatch(): Promise<CareerMatch> { throw new Error('Not implemented'); }\n  async deleteUserCareerMatches(): Promise<void> { }\n  async getUserRoadmaps(): Promise<Roadmap[]> { return []; }\n  async createRoadmap(): Promise<Roadmap> { throw new Error('Not implemented'); }\n  async getRoadmapById(): Promise<Roadmap | undefined> { return undefined; }\n  async updateRoadmap(): Promise<Roadmap> { throw new Error('Not implemented'); }\n  async getUserProgress(): Promise<UserProgress[]> { return []; }\n  async createUserProgress(): Promise<UserProgress> { throw new Error('Not implemented'); }\n  async updateUserProgress(): Promise<UserProgress> { throw new Error('Not implemented'); }\n  async getLearningResources(): Promise<LearningResource[]> { return []; }\n  async getUserStats(): Promise<{ careerMatches: number; roadmapProgress: number; skillsAcquired: number; }> {\n    return { careerMatches: 0, roadmapProgress: 0, skillsAcquired: 0 };\n  }\n  async getUserActivity(): Promise<any[]> { return []; }\n}\n","size_bytes":9978},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, real, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  profilePicture: text(\"profile_picture\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\"), // e.g., \"Computer Science Student\"\n  bio: text(\"bio\"),\n  location: text(\"location\"),\n  experience: text(\"experience\"), // \"fresher\", \"0-2\", \"2-5\", \"5-10\", \"10+\"\n  education: jsonb(\"education\").$type<{\n    degree: string;\n    field: string;\n    institution: string;\n    year: number;\n  }[]>(),\n  interests: text(\"interests\").array(),\n  skills: jsonb(\"skills\").$type<{\n    name: string;\n    level: \"beginner\" | \"intermediate\" | \"advanced\" | \"expert\";\n    verified: boolean;\n  }[]>(),\n  resumeUrl: text(\"resume_url\"),\n  resumeParsedData: jsonb(\"resume_parsed_data\"),\n  completionPercentage: integer(\"completion_percentage\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const careers = pgTable(\"careers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  requirements: jsonb(\"requirements\").$type<string[]>(),\n  skills: jsonb(\"skills\").$type<{\n    name: string;\n    level: \"beginner\" | \"intermediate\" | \"advanced\" | \"expert\";\n    category: \"technical\" | \"soft\" | \"domain\";\n  }[]>(),\n  salaryRange: jsonb(\"salary_range\").$type<{\n    min: number;\n    max: number;\n    currency: string;\n  }>(),\n  locations: text(\"locations\").array(),\n  industry: text(\"industry\"),\n  growthPath: jsonb(\"growth_path\").$type<{\n    level: string;\n    title: string;\n    salaryRange: { min: number; max: number };\n    experience: string;\n  }[]>(),\n  embedding: jsonb(\"embedding\").$type<number[]>(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const careerMatches = pgTable(\"career_matches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  careerId: varchar(\"career_id\").references(() => careers.id).notNull(),\n  compatibilityScore: real(\"compatibility_score\").notNull(),\n  matchReasons: jsonb(\"match_reasons\").$type<string[]>(),\n  skillGaps: jsonb(\"skill_gaps\").$type<{\n    skill: string;\n    currentLevel: string;\n    requiredLevel: string;\n  }[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const roadmaps = pgTable(\"roadmaps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  careerId: varchar(\"career_id\").references(() => careers.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  milestones: jsonb(\"milestones\").$type<{\n    id: string;\n    title: string;\n    description: string;\n    skills: string[];\n    estimatedTime: string;\n    resources: {\n      title: string;\n      type: \"course\" | \"article\" | \"project\" | \"certification\";\n      url: string;\n      provider: string;\n    }[];\n    order: number;\n  }[]>(),\n  totalEstimatedTime: text(\"total_estimated_time\"),\n  difficulty: text(\"difficulty\"), // \"beginner\", \"intermediate\", \"advanced\"\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  roadmapId: varchar(\"roadmap_id\").references(() => roadmaps.id).notNull(),\n  milestoneId: text(\"milestone_id\").notNull(),\n  status: text(\"status\").notNull(), // \"not_started\", \"in_progress\", \"completed\"\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const learningResources = pgTable(\"learning_resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // \"course\", \"article\", \"project\", \"certification\"\n  url: text(\"url\").notNull(),\n  provider: text(\"provider\").notNull(),\n  rating: real(\"rating\"),\n  duration: text(\"duration\"),\n  difficulty: text(\"difficulty\"),\n  skills: text(\"skills\").array(),\n  isRecommended: boolean(\"is_recommended\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCareerSchema = createInsertSchema(careers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCareerMatchSchema = createInsertSchema(careerMatches).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoadmapSchema = createInsertSchema(roadmaps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type Career = typeof careers.$inferSelect;\nexport type InsertCareer = z.infer<typeof insertCareerSchema>;\nexport type CareerMatch = typeof careerMatches.$inferSelect;\nexport type InsertCareerMatch = z.infer<typeof insertCareerMatchSchema>;\nexport type Roadmap = typeof roadmaps.$inferSelect;\nexport type InsertRoadmap = z.infer<typeof insertRoadmapSchema>;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type LearningResource = typeof learningResources.$inferSelect;\n","size_bytes":6770},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/components/auth/AuthProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Auth from \"@/pages/auth\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Dashboard from \"@/pages/dashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/onboarding\" component={Onboarding} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1103},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/connectors/educationConnector.ts":{"content":"// Modular connector scaffold for educational platform integrations\n// This file provides the interface and basic structure for connecting to various learning platforms\n\nexport interface EducationalResource {\n  id: string;\n  title: string;\n  description: string;\n  provider: string;\n  instructor?: string;\n  type: 'course' | 'tutorial' | 'certification' | 'bootcamp' | 'workshop';\n  category: string;\n  skills: string[];\n  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  duration: string; // e.g., \"4 weeks\", \"10 hours\"\n  rating?: number;\n  reviewCount?: number;\n  price: {\n    amount: number;\n    currency: string;\n    isFree: boolean;\n  };\n  language: string;\n  certificate: boolean;\n  url: string;\n  thumbnailUrl?: string;\n  prerequisites?: string[];\n  learningOutcomes?: string[];\n  lastUpdated?: Date;\n  sourcePlatform: string;\n}\n\nexport interface EducationConnector {\n  name: string;\n  searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]>;\n  getCourseDetails(courseId: string): Promise<EducationalResource | null>;\n  isAvailable(): Promise<boolean>;\n}\n\nexport interface CourseSearchQuery {\n  keywords?: string;\n  category?: string;\n  skills?: string[];\n  level?: string;\n  type?: string;\n  language?: string;\n  freeOnly?: boolean;\n  withCertificate?: boolean;\n  maxPrice?: number;\n  limit?: number;\n}\n\n// Coursera connector stub\nexport class CourseraConnector implements EducationConnector {\n  name = 'Coursera';\n  private apiKey = process.env.COURSERA_API_KEY;\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement Coursera API integration\n    // Coursera provides a Partner API for institutional access\n    // Individual API access may be limited\n    \n    console.log('Coursera connector not implemented yet');\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting course details for ${courseId} from Coursera - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return !!this.apiKey;\n  }\n}\n\n// Udemy connector stub\nexport class UdemyConnector implements EducationConnector {\n  name = 'Udemy';\n  private apiKey = process.env.UDEMY_API_KEY;\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement Udemy API integration\n    // Udemy provides an Affiliate API that can be used for course data\n    \n    console.log('Udemy connector not implemented yet');\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting course details for ${courseId} from Udemy - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return !!this.apiKey;\n  }\n}\n\n// Unacademy connector stub (Popular in India)\nexport class UnacademyConnector implements EducationConnector {\n  name = 'Unacademy';\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement Unacademy API integration\n    // May require web scraping or partnerships since public API may not be available\n    \n    console.log('Unacademy connector not implemented yet');\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting course details for ${courseId} from Unacademy - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false; // Not implemented yet\n  }\n}\n\n// BYJU'S connector stub (Popular in India)\nexport class ByjusConnector implements EducationConnector {\n  name = \"BYJU'S\";\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement BYJU'S API integration\n    console.log(\"BYJU'S connector not implemented yet\");\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting course details for ${courseId} from BYJU'S - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false;\n  }\n}\n\n// YouTube Educational content connector stub\nexport class YouTubeEduConnector implements EducationConnector {\n  name = 'YouTube Education';\n  private apiKey = process.env.YOUTUBE_API_KEY;\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement YouTube Data API v3 integration\n    // Search for educational playlists and channels\n    \n    console.log('YouTube Education connector not implemented yet');\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting playlist details for ${courseId} from YouTube - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return !!this.apiKey;\n  }\n}\n\n// edX connector stub\nexport class EdxConnector implements EducationConnector {\n  name = 'edX';\n  \n  async searchCourses(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    // TODO: Implement edX API integration\n    // edX provides APIs for course catalog access\n    \n    console.log('edX connector not implemented yet');\n    return [];\n  }\n  \n  async getCourseDetails(courseId: string): Promise<EducationalResource | null> {\n    console.log(`Getting course details for ${courseId} from edX - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false;\n  }\n}\n\n// Educational platform aggregator service\nexport class EducationService {\n  private connectors: EducationConnector[] = [];\n  \n  constructor() {\n    // Initialize connectors\n    this.connectors = [\n      new CourseraConnector(),\n      new UdemyConnector(),\n      new UnacademyConnector(),\n      new ByjusConnector(),\n      new YouTubeEduConnector(),\n      new EdxConnector(),\n    ];\n  }\n  \n  async searchAllPlatforms(query: CourseSearchQuery): Promise<EducationalResource[]> {\n    const allCourses: EducationalResource[] = [];\n    \n    // Search across all available platforms\n    const searchPromises = this.connectors.map(async (connector) => {\n      try {\n        const isAvailable = await connector.isAvailable();\n        if (isAvailable) {\n          const courses = await connector.searchCourses(query);\n          return courses;\n        }\n        return [];\n      } catch (error) {\n        console.error(`Error searching courses from ${connector.name}:`, error);\n        return [];\n      }\n    });\n    \n    const results = await Promise.all(searchPromises);\n    results.forEach(courses => allCourses.push(...courses));\n    \n    // Remove duplicates and sort by relevance\n    const uniqueCourses = this.removeDuplicateCourses(allCourses);\n    return this.sortCoursesByRelevance(uniqueCourses, query);\n  }\n  \n  async getCourseFromAnyPlatform(courseId: string, platform?: string): Promise<EducationalResource | null> {\n    if (platform) {\n      const connector = this.connectors.find(c => \n        c.name.toLowerCase().includes(platform.toLowerCase())\n      );\n      if (connector) {\n        return await connector.getCourseDetails(courseId);\n      }\n    }\n    \n    // Try all connectors if platform not specified\n    for (const connector of this.connectors) {\n      try {\n        const course = await connector.getCourseDetails(courseId);\n        if (course) return course;\n      } catch (error) {\n        console.error(`Error getting course details from ${connector.name}:`, error);\n      }\n    }\n    \n    return null;\n  }\n  \n  async getRecommendationsForSkills(skills: string[], level: string = 'intermediate'): Promise<EducationalResource[]> {\n    const recommendations: EducationalResource[] = [];\n    \n    for (const skill of skills.slice(0, 5)) { // Limit to 5 skills to avoid too many API calls\n      try {\n        const courses = await this.searchAllPlatforms({\n          keywords: skill,\n          level: level as any,\n          withCertificate: true,\n          limit: 3, // Top 3 courses per skill\n        });\n        \n        recommendations.push(...courses.slice(0, 2)); // Take top 2 per skill\n      } catch (error) {\n        console.error(`Error getting recommendations for skill ${skill}:`, error);\n      }\n    }\n    \n    // Remove duplicates and limit total results\n    return this.removeDuplicateCourses(recommendations).slice(0, 10);\n  }\n  \n  private removeDuplicateCourses(courses: EducationalResource[]): EducationalResource[] {\n    const seen = new Set<string>();\n    return courses.filter(course => {\n      const key = `${course.title.toLowerCase()}-${course.provider.toLowerCase()}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n  \n  private sortCoursesByRelevance(courses: EducationalResource[], query: CourseSearchQuery): EducationalResource[] {\n    return courses.sort((a, b) => {\n      let scoreA = 0;\n      let scoreB = 0;\n      \n      // Score based on keyword match\n      if (query.keywords) {\n        const keywords = query.keywords.toLowerCase();\n        if (a.title.toLowerCase().includes(keywords)) scoreA += 10;\n        if (a.description.toLowerCase().includes(keywords)) scoreA += 5;\n        if (b.title.toLowerCase().includes(keywords)) scoreB += 10;\n        if (b.description.toLowerCase().includes(keywords)) scoreB += 5;\n      }\n      \n      // Score based on skills match\n      if (query.skills && query.skills.length > 0) {\n        const matchingSkillsA = a.skills.filter(skill => \n          query.skills!.some(qSkill => skill.toLowerCase().includes(qSkill.toLowerCase()))\n        ).length;\n        const matchingSkillsB = b.skills.filter(skill => \n          query.skills!.some(qSkill => skill.toLowerCase().includes(qSkill.toLowerCase()))\n        ).length;\n        \n        scoreA += matchingSkillsA * 3;\n        scoreB += matchingSkillsB * 3;\n      }\n      \n      // Prefer courses with higher ratings\n      if (a.rating) scoreA += a.rating;\n      if (b.rating) scoreB += b.rating;\n      \n      // Prefer courses with certificates\n      if (a.certificate) scoreA += 2;\n      if (b.certificate) scoreB += 2;\n      \n      // Prefer free courses if freeOnly is specified\n      if (query.freeOnly) {\n        if (a.price.isFree) scoreA += 5;\n        if (b.price.isFree) scoreB += 5;\n      }\n      \n      // Prefer recently updated courses\n      if (a.lastUpdated) {\n        const daysSinceUpdate = Math.floor(\n          (Date.now() - a.lastUpdated.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        scoreA += Math.max(0, 30 - daysSinceUpdate) / 10; // Max 3 points for recent updates\n      }\n      \n      if (b.lastUpdated) {\n        const daysSinceUpdate = Math.floor(\n          (Date.now() - b.lastUpdated.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        scoreB += Math.max(0, 30 - daysSinceUpdate) / 10;\n      }\n      \n      return scoreB - scoreA;\n    });\n  }\n  \n  async getAvailablePlatforms(): Promise<string[]> {\n    const availablePromises = this.connectors.map(async (connector) => {\n      const isAvailable = await connector.isAvailable();\n      return isAvailable ? connector.name : null;\n    });\n    \n    const results = await Promise.all(availablePromises);\n    return results.filter(Boolean) as string[];\n  }\n  \n  // Get learning path suggestions\n  async getLearningPath(targetSkills: string[], currentLevel: string = 'beginner'): Promise<{\n    skills: string[];\n    courses: EducationalResource[];\n    estimatedTime: string;\n  }> {\n    // This is a simplified learning path generator\n    // In production, this would use ML to create optimal learning sequences\n    \n    const learningPath: EducationalResource[] = [];\n    let totalDurationHours = 0;\n    \n    // Define skill prerequisites and learning order\n    const skillOrder = this.getOptimalSkillOrder(targetSkills);\n    \n    for (const skill of skillOrder) {\n      const courses = await this.searchAllPlatforms({\n        keywords: skill,\n        level: currentLevel as any,\n        withCertificate: true,\n        limit: 2,\n      });\n      \n      if (courses.length > 0) {\n        learningPath.push(courses[0]); // Take the best matching course\n        \n        // Estimate duration (simplified)\n        const durationMatch = courses[0].duration.match(/(\\d+)/);\n        if (durationMatch) {\n          totalDurationHours += parseInt(durationMatch[0]);\n        }\n      }\n    }\n    \n    const estimatedTime = this.formatDuration(totalDurationHours);\n    \n    return {\n      skills: skillOrder,\n      courses: learningPath,\n      estimatedTime,\n    };\n  }\n  \n  private getOptimalSkillOrder(skills: string[]): string[] {\n    // This is a simplified skill ordering\n    // In production, this would use a more sophisticated algorithm\n    // considering prerequisites and skill dependencies\n    \n    const skillPriority: { [key: string]: number } = {\n      'html': 1,\n      'css': 2,\n      'javascript': 3,\n      'react': 4,\n      'node.js': 5,\n      'database': 6,\n      'python': 1,\n      'sql': 2,\n      'pandas': 3,\n      'machine learning': 4,\n      'deep learning': 5,\n    };\n    \n    return skills.sort((a, b) => {\n      const priorityA = skillPriority[a.toLowerCase()] || 999;\n      const priorityB = skillPriority[b.toLowerCase()] || 999;\n      return priorityA - priorityB;\n    });\n  }\n  \n  private formatDuration(hours: number): string {\n    if (hours < 24) {\n      return `${hours} hours`;\n    } else if (hours < 168) {\n      const days = Math.ceil(hours / 8); // 8 hours per learning day\n      return `${days} days`;\n    } else {\n      const weeks = Math.ceil(hours / 40); // 40 hours per learning week\n      return `${weeks} weeks`;\n    }\n  }\n}\n\nexport const educationService = new EducationService();\n\n// Usage example:\n/*\nimport { educationService } from './educationConnector';\n\n// Search for courses\nconst courses = await educationService.searchAllPlatforms({\n  keywords: 'react development',\n  level: 'intermediate',\n  withCertificate: true,\n  freeOnly: false,\n  limit: 10\n});\n\n// Get learning path\nconst learningPath = await educationService.getLearningPath(\n  ['html', 'css', 'javascript', 'react', 'node.js'],\n  'beginner'\n);\n\n// Get recommendations based on user skills\nconst recommendations = await educationService.getRecommendationsForSkills(\n  ['python', 'machine learning'],\n  'intermediate'\n);\n*/\n","size_bytes":14299},"server/connectors/jobBoardConnector.ts":{"content":"// Modular connector scaffold for job board integrations\n// This file provides the interface and basic structure for connecting to various job boards\n\nexport interface JobBoardJob {\n  id: string;\n  title: string;\n  company: string;\n  location: string;\n  description: string;\n  requirements: string[];\n  salaryRange?: {\n    min: number;\n    max: number;\n    currency: string;\n  };\n  skills: string[];\n  experience: string;\n  jobType: 'full-time' | 'part-time' | 'contract' | 'internship';\n  remote: boolean;\n  postedDate: Date;\n  expiryDate?: Date;\n  sourceUrl: string;\n  sourcePlatform: string;\n}\n\nexport interface JobBoardConnector {\n  name: string;\n  searchJobs(query: JobSearchQuery): Promise<JobBoardJob[]>;\n  getJobDetails(jobId: string): Promise<JobBoardJob | null>;\n  isAvailable(): Promise<boolean>;\n}\n\nexport interface JobSearchQuery {\n  keywords?: string;\n  location?: string;\n  skills?: string[];\n  experience?: string;\n  jobType?: string;\n  remote?: boolean;\n  salaryMin?: number;\n  limit?: number;\n}\n\n// Naukri.com connector stub\nexport class NaukriConnector implements JobBoardConnector {\n  name = 'Naukri.com';\n  \n  async searchJobs(query: JobSearchQuery): Promise<JobBoardJob[]> {\n    // TODO: Implement Naukri.com API integration\n    // This would require:\n    // 1. Naukri.com API credentials\n    // 2. API endpoint integration\n    // 3. Data transformation from Naukri format to JobBoardJob format\n    \n    console.log('Naukri.com connector not implemented yet');\n    return [];\n  }\n  \n  async getJobDetails(jobId: string): Promise<JobBoardJob | null> {\n    // TODO: Implement job details fetching from Naukri\n    console.log(`Getting job details for ${jobId} from Naukri - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    // TODO: Check if Naukri API is accessible\n    return false;\n  }\n}\n\n// Indeed connector stub\nexport class IndeedConnector implements JobBoardConnector {\n  name = 'Indeed';\n  \n  async searchJobs(query: JobSearchQuery): Promise<JobBoardJob[]> {\n    // TODO: Implement Indeed API integration\n    // Note: Indeed has specific terms of service for API usage\n    console.log('Indeed connector not implemented yet');\n    return [];\n  }\n  \n  async getJobDetails(jobId: string): Promise<JobBoardJob | null> {\n    console.log(`Getting job details for ${jobId} from Indeed - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false;\n  }\n}\n\n// LinkedIn Jobs connector stub\nexport class LinkedInJobsConnector implements JobBoardConnector {\n  name = 'LinkedIn Jobs';\n  \n  async searchJobs(query: JobSearchQuery): Promise<JobBoardJob[]> {\n    // TODO: Implement LinkedIn Jobs API integration\n    // Requires LinkedIn API access and proper authentication\n    console.log('LinkedIn Jobs connector not implemented yet');\n    return [];\n  }\n  \n  async getJobDetails(jobId: string): Promise<JobBoardJob | null> {\n    console.log(`Getting job details for ${jobId} from LinkedIn - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false;\n  }\n}\n\n// Monster.com connector stub\nexport class MonsterConnector implements JobBoardConnector {\n  name = 'Monster.com';\n  \n  async searchJobs(query: JobSearchQuery): Promise<JobBoardJob[]> {\n    // TODO: Implement Monster.com API integration\n    console.log('Monster.com connector not implemented yet');\n    return [];\n  }\n  \n  async getJobDetails(jobId: string): Promise<JobBoardJob | null> {\n    console.log(`Getting job details for ${jobId} from Monster - not implemented yet`);\n    return null;\n  }\n  \n  async isAvailable(): Promise<boolean> {\n    return false;\n  }\n}\n\n// Job board aggregator service\nexport class JobBoardService {\n  private connectors: JobBoardConnector[] = [];\n  \n  constructor() {\n    // Initialize connectors\n    this.connectors = [\n      new NaukriConnector(),\n      new IndeedConnector(),\n      new LinkedInJobsConnector(),\n      new MonsterConnector(),\n    ];\n  }\n  \n  async searchAllPlatforms(query: JobSearchQuery): Promise<JobBoardJob[]> {\n    const allJobs: JobBoardJob[] = [];\n    \n    // Search across all available platforms\n    const searchPromises = this.connectors.map(async (connector) => {\n      try {\n        const isAvailable = await connector.isAvailable();\n        if (isAvailable) {\n          const jobs = await connector.searchJobs(query);\n          return jobs;\n        }\n        return [];\n      } catch (error) {\n        console.error(`Error searching jobs from ${connector.name}:`, error);\n        return [];\n      }\n    });\n    \n    const results = await Promise.all(searchPromises);\n    results.forEach(jobs => allJobs.push(...jobs));\n    \n    // Remove duplicates based on title and company\n    const uniqueJobs = this.removeDuplicateJobs(allJobs);\n    \n    // Sort by relevance (could be enhanced with ML scoring)\n    return this.sortJobsByRelevance(uniqueJobs, query);\n  }\n  \n  async getJobFromAnyPlatform(jobId: string, platform?: string): Promise<JobBoardJob | null> {\n    if (platform) {\n      const connector = this.connectors.find(c => c.name.toLowerCase().includes(platform.toLowerCase()));\n      if (connector) {\n        return await connector.getJobDetails(jobId);\n      }\n    }\n    \n    // Try all connectors if platform not specified\n    for (const connector of this.connectors) {\n      try {\n        const job = await connector.getJobDetails(jobId);\n        if (job) return job;\n      } catch (error) {\n        console.error(`Error getting job details from ${connector.name}:`, error);\n      }\n    }\n    \n    return null;\n  }\n  \n  private removeDuplicateJobs(jobs: JobBoardJob[]): JobBoardJob[] {\n    const seen = new Set<string>();\n    return jobs.filter(job => {\n      const key = `${job.title.toLowerCase()}-${job.company.toLowerCase()}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n  \n  private sortJobsByRelevance(jobs: JobBoardJob[], query: JobSearchQuery): JobBoardJob[] {\n    return jobs.sort((a, b) => {\n      let scoreA = 0;\n      let scoreB = 0;\n      \n      // Score based on keyword match\n      if (query.keywords) {\n        const keywords = query.keywords.toLowerCase();\n        if (a.title.toLowerCase().includes(keywords)) scoreA += 10;\n        if (a.description.toLowerCase().includes(keywords)) scoreA += 5;\n        if (b.title.toLowerCase().includes(keywords)) scoreB += 10;\n        if (b.description.toLowerCase().includes(keywords)) scoreB += 5;\n      }\n      \n      // Score based on skills match\n      if (query.skills && query.skills.length > 0) {\n        const matchingSkillsA = a.skills.filter(skill => \n          query.skills!.some(qSkill => skill.toLowerCase().includes(qSkill.toLowerCase()))\n        ).length;\n        const matchingSkillsB = b.skills.filter(skill => \n          query.skills!.some(qSkill => skill.toLowerCase().includes(qSkill.toLowerCase()))\n        ).length;\n        \n        scoreA += matchingSkillsA * 3;\n        scoreB += matchingSkillsB * 3;\n      }\n      \n      // Prefer newer jobs\n      scoreA += Math.max(0, 7 - Math.floor((Date.now() - a.postedDate.getTime()) / (1000 * 60 * 60 * 24)));\n      scoreB += Math.max(0, 7 - Math.floor((Date.now() - b.postedDate.getTime()) / (1000 * 60 * 60 * 24)));\n      \n      return scoreB - scoreA;\n    });\n  }\n  \n  async getAvailablePlatforms(): Promise<string[]> {\n    const availablePromises = this.connectors.map(async (connector) => {\n      const isAvailable = await connector.isAvailable();\n      return isAvailable ? connector.name : null;\n    });\n    \n    const results = await Promise.all(availablePromises);\n    return results.filter(Boolean) as string[];\n  }\n}\n\nexport const jobBoardService = new JobBoardService();\n\n// Usage example:\n/*\nimport { jobBoardService } from './jobBoardConnector';\n\n// Search for jobs\nconst jobs = await jobBoardService.searchAllPlatforms({\n  keywords: 'full stack developer',\n  location: 'mumbai',\n  skills: ['react', 'node.js'],\n  experience: '2-5',\n  limit: 20\n});\n\n// Get job details\nconst jobDetails = await jobBoardService.getJobFromAnyPlatform('job123', 'naukri');\n*/\n","size_bytes":8119},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { verifyIdToken } from '../services/firebaseAdmin';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    uid: string;\n    email?: string;\n    emailVerified: boolean;\n    name?: string;\n    picture?: string;\n  };\n}\n\nexport async function authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    \n    if (!token) {\n      return res.status(401).json({ \n        message: 'Access token required',\n        error: 'MISSING_TOKEN' \n      });\n    }\n    \n    try {\n      const decodedToken = await verifyIdToken(token);\n      \n      req.user = {\n        uid: decodedToken.uid,\n        email: decodedToken.email,\n        emailVerified: decodedToken.email_verified || false,\n        name: decodedToken.name,\n        picture: decodedToken.picture,\n      };\n      \n      next();\n    } catch (tokenError) {\n      return res.status(401).json({ \n        message: 'Invalid or expired token',\n        error: 'INVALID_TOKEN' \n      });\n    }\n  } catch (error) {\n    console.error('Authentication middleware error:', error);\n    return res.status(500).json({ \n      message: 'Authentication service error',\n      error: 'AUTH_SERVICE_ERROR' \n    });\n  }\n}\n\n// Optional auth middleware - doesn't fail if no token provided\nexport async function optionalAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (token) {\n    try {\n      const decodedToken = await verifyIdToken(token);\n      req.user = {\n        uid: decodedToken.uid,\n        email: decodedToken.email,\n        emailVerified: decodedToken.email_verified || false,\n        name: decodedToken.name,\n        picture: decodedToken.picture,\n      };\n    } catch (error) {\n      // Ignore token errors in optional auth\n      console.warn('Optional auth token verification failed:', error);\n    }\n  }\n  \n  next();\n}\n\n// Middleware to check if user has completed profile\nexport async function requireCompleteProfile(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ \n      message: 'Authentication required',\n      error: 'NOT_AUTHENTICATED' \n    });\n  }\n  \n  try {\n    // Import here to avoid circular dependency\n    const { firestoreService } = await import('../services/firestoreService');\n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    \n    if (!user) {\n      return res.status(404).json({ \n        message: 'User profile not found',\n        error: 'PROFILE_NOT_FOUND' \n      });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    \n    if (!profile || !profile.title || !profile.interests || profile.interests.length === 0) {\n      return res.status(400).json({ \n        message: 'Profile incomplete. Please complete onboarding first.',\n        error: 'INCOMPLETE_PROFILE',\n        redirectTo: '/onboarding'\n      });\n    }\n    \n    next();\n  } catch (error) {\n    console.error('Profile verification error:', error);\n    return res.status(500).json({ \n      message: 'Profile verification failed',\n      error: 'PROFILE_VERIFICATION_ERROR' \n    });\n  }\n}\n","size_bytes":3398},"server/routes/auth.ts":{"content":"import { Router } from 'express';\nimport { firestoreService } from '../services/firestoreService';\nimport { authenticateToken, AuthenticatedRequest } from '../middleware/auth';\n\nconst router = Router();\n\n// Get current user info\nrouter.get('/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    let user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    \n    if (!user) {\n      // Create user if doesn't exist (first login)\n      user = await firestoreService.createUser({\n        firebaseUid: req.user.uid,\n        email: req.user.email || '',\n        name: req.user.name || '',\n        profilePicture: req.user.picture,\n      });\n    }\n    \n    // Get user profile\n    const profile = await firestoreService.getUserProfile(user.id);\n    \n    res.json({\n      user,\n      profile,\n      hasCompletedOnboarding: !!(profile && profile.title && profile.interests && profile.interests.length > 0)\n    });\n  } catch (error) {\n    console.error('Error getting user info:', error);\n    res.status(500).json({ \n      message: 'Failed to get user information',\n      error: error.message \n    });\n  }\n});\n\n// Update user basic info\nrouter.patch('/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const { name, profilePicture } = req.body;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const updates: any = {};\n    if (name !== undefined) updates.name = name;\n    if (profilePicture !== undefined) updates.profilePicture = profilePicture;\n    \n    if (Object.keys(updates).length === 0) {\n      return res.status(400).json({ message: 'No valid fields to update' });\n    }\n    \n    const updatedUser = await firestoreService.updateUser(user.id, updates);\n    \n    res.json(updatedUser);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(500).json({ \n      message: 'Failed to update user',\n      error: error.message \n    });\n  }\n});\n\n// Delete user account (soft delete)\nrouter.delete('/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // In production, implement soft delete by setting isDeleted flag\n    // For now, just return success\n    res.json({ message: 'Account deletion requested successfully' });\n  } catch (error) {\n    console.error('Error deleting user account:', error);\n    res.status(500).json({ \n      message: 'Failed to delete account',\n      error: error.message \n    });\n  }\n});\n\nexport default router;\n","size_bytes":3061},"server/routes/matching.ts":{"content":"import { Router } from 'express';\nimport { authenticateToken, requireCompleteProfile, AuthenticatedRequest } from '../middleware/auth';\nimport { firestoreService } from '../services/firestoreService';\nimport { matchingEngine } from '../services/matchingEngine';\n\nconst router = Router();\n\n// Get career matches for user\nrouter.get('/', authenticateToken, requireCompleteProfile, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Get enhanced career matches (includes career details)\n    const matches = await matchingEngine.getEnhancedCareerMatches(user.id);\n    \n    res.json(matches);\n  } catch (error) {\n    console.error('Error getting career matches:', error);\n    res.status(500).json({ \n      message: 'Failed to get career matches',\n      error: error.message \n    });\n  }\n});\n\n// Generate new career matches\nrouter.post('/generate', authenticateToken, requireCompleteProfile, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    if (!profile) {\n      return res.status(404).json({ message: 'Profile not found' });\n    }\n    \n    const limit = Math.min(parseInt(req.body.limit || '10'), 20);\n    \n    // Generate new matches\n    const matches = await matchingEngine.generateCareerMatches(user.id, profile, limit);\n    \n    // Return enhanced matches with career details\n    const enhancedMatches = matches.map(match => ({\n      id: match.career.id,\n      title: match.career.title,\n      description: match.career.description,\n      compatibilityScore: match.compatibilityScore,\n      matchReasons: match.matchReasons,\n      skillGaps: match.skillGaps,\n      salaryRange: match.career.salaryRange,\n      skills: match.career.skills?.slice(0, 5) || [],\n      industry: match.career.industry,\n      locations: match.career.locations,\n      growthPath: match.career.growthPath,\n      requirements: match.career.requirements,\n    }));\n    \n    res.json({\n      message: 'Career matches generated successfully',\n      matches: enhancedMatches,\n    });\n  } catch (error) {\n    console.error('Error generating career matches:', error);\n    res.status(500).json({ \n      message: 'Failed to generate career matches',\n      error: error.message \n    });\n  }\n});\n\n// Get detailed career information\nrouter.get('/career/:careerId', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    const { careerId } = req.params;\n    \n    const career = await firestoreService.getCareerById(careerId);\n    if (!career) {\n      return res.status(404).json({ message: 'Career not found' });\n    }\n    \n    // If user is authenticated, get their match score for this career\n    let matchScore = null;\n    if (req.user) {\n      const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n      if (user) {\n        const matches = await firestoreService.getUserCareerMatches(user.id);\n        const userMatch = matches.find(match => match.careerId === careerId);\n        if (userMatch) {\n          matchScore = {\n            compatibilityScore: userMatch.compatibilityScore,\n            matchReasons: userMatch.matchReasons,\n            skillGaps: userMatch.skillGaps,\n          };\n        }\n      }\n    }\n    \n    res.json({\n      ...career,\n      matchScore,\n    });\n  } catch (error) {\n    console.error('Error getting career details:', error);\n    res.status(500).json({ \n      message: 'Failed to get career details',\n      error: error.message \n    });\n  }\n});\n\n// Get all available careers (for browsing)\nrouter.get('/careers', async (req, res) => {\n  try {\n    const limit = Math.min(parseInt(req.query.limit as string) || 20, 100);\n    const offset = parseInt(req.query.offset as string) || 0;\n    \n    const careers = await firestoreService.getCareers(limit + offset);\n    const paginatedCareers = careers.slice(offset, offset + limit);\n    \n    // Remove embeddings from public API response\n    const publicCareers = paginatedCareers.map(career => {\n      const { embedding, ...publicCareer } = career;\n      return publicCareer;\n    });\n    \n    res.json({\n      careers: publicCareers,\n      total: careers.length,\n      limit,\n      offset,\n    });\n  } catch (error) {\n    console.error('Error getting careers:', error);\n    res.status(500).json({ \n      message: 'Failed to get careers',\n      error: error.message \n    });\n  }\n});\n\n// Search careers\nrouter.get('/careers/search', async (req, res) => {\n  try {\n    const { q, industry, skills } = req.query;\n    \n    if (!q && !industry && !skills) {\n      return res.status(400).json({ message: 'Search query, industry, or skills required' });\n    }\n    \n    // This is a basic implementation - in production, you'd use more sophisticated search\n    const allCareers = await firestoreService.getCareers(100);\n    let filteredCareers = allCareers;\n    \n    // Filter by text search\n    if (q) {\n      const searchTerm = (q as string).toLowerCase();\n      filteredCareers = filteredCareers.filter(career => \n        career.title.toLowerCase().includes(searchTerm) ||\n        career.description.toLowerCase().includes(searchTerm) ||\n        career.industry?.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    // Filter by industry\n    if (industry) {\n      filteredCareers = filteredCareers.filter(career => \n        career.industry?.toLowerCase() === (industry as string).toLowerCase()\n      );\n    }\n    \n    // Filter by skills\n    if (skills) {\n      const skillArray = (skills as string).split(',').map(s => s.trim().toLowerCase());\n      filteredCareers = filteredCareers.filter(career => \n        career.skills?.some(skill => \n          skillArray.some(searchSkill => \n            skill.name.toLowerCase().includes(searchSkill)\n          )\n        )\n      );\n    }\n    \n    // Remove embeddings from public API response\n    const publicCareers = filteredCareers.map(career => {\n      const { embedding, ...publicCareer } = career;\n      return publicCareer;\n    });\n    \n    res.json({\n      careers: publicCareers.slice(0, 20), // Limit results\n      total: publicCareers.length,\n    });\n  } catch (error) {\n    console.error('Error searching careers:', error);\n    res.status(500).json({ \n      message: 'Failed to search careers',\n      error: error.message \n    });\n  }\n});\n\nexport default router;\n","size_bytes":6816},"server/routes/profile.ts":{"content":"import { Router } from 'express';\nimport { authenticateToken, AuthenticatedRequest } from '../middleware/auth';\nimport { firestoreService } from '../services/firestoreService';\nimport { resumeParser } from '../services/resumeParser';\nimport { embeddingService } from '../services/embeddings';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schemas\nconst createProfileSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  bio: z.string().optional(),\n  location: z.string().optional(),\n  experience: z.enum(['fresher', '0-2', '2-5', '5-10', '10+']).optional(),\n  education: z.array(z.object({\n    degree: z.string(),\n    field: z.string(),\n    institution: z.string(),\n    year: z.number().int().min(1950).max(new Date().getFullYear() + 5),\n  })).optional(),\n  interests: z.array(z.string()).min(1, 'At least one interest is required'),\n  skills: z.array(z.object({\n    name: z.string(),\n    level: z.enum(['beginner', 'intermediate', 'advanced', 'expert']),\n    verified: z.boolean().default(false),\n  })).optional(),\n  resumeUrl: z.string().url().optional(),\n});\n\nconst updateProfileSchema = createProfileSchema.partial();\n\n// Get user profile\nrouter.get('/', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    \n    if (!profile) {\n      return res.status(404).json({ message: 'Profile not found' });\n    }\n    \n    // Include user basic info with profile\n    const response = {\n      ...profile,\n      name: user.name,\n      email: user.email,\n      profilePicture: user.profilePicture,\n    };\n    \n    res.json(response);\n  } catch (error) {\n    console.error('Error getting profile:', error);\n    res.status(500).json({ \n      message: 'Failed to get profile',\n      error: error.message \n    });\n  }\n});\n\n// Create user profile (onboarding)\nrouter.post('/', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Validate request body\n    const validationResult = createProfileSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({ \n        message: 'Invalid profile data',\n        errors: validationResult.error.errors \n      });\n    }\n    \n    const profileData = validationResult.data;\n    \n    let user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      // Create user if doesn't exist\n      user = await firestoreService.createUser({\n        firebaseUid: req.user.uid,\n        email: req.user.email || '',\n        name: req.user.name || '',\n        profilePicture: req.user.picture,\n      });\n    }\n    \n    // Check if profile already exists\n    const existingProfile = await firestoreService.getUserProfile(user.id);\n    if (existingProfile) {\n      return res.status(400).json({ message: 'Profile already exists. Use PUT to update.' });\n    }\n    \n    // Process resume if provided\n    let resumeParsedData = null;\n    if (profileData.resumeUrl) {\n      try {\n        resumeParsedData = await resumeParser.parseFromUrl(profileData.resumeUrl);\n        \n        // Enhance skills with parsed resume data\n        const resumeSkills = resumeParsedData.skills.map(skill => ({\n          name: skill,\n          level: 'intermediate' as const,\n          verified: false,\n        }));\n        \n        // Merge with provided skills\n        const combinedSkills = [...(profileData.skills || [])];\n        resumeSkills.forEach(resumeSkill => {\n          if (!combinedSkills.find(s => s.name.toLowerCase() === resumeSkill.name.toLowerCase())) {\n            combinedSkills.push(resumeSkill);\n          }\n        });\n        \n        profileData.skills = combinedSkills;\n      } catch (error) {\n        console.error('Resume parsing error:', error);\n        // Continue without resume data\n      }\n    }\n    \n    // Calculate completion percentage\n    const completionPercentage = calculateCompletionPercentage(profileData);\n    \n    // Create profile\n    const profile = await firestoreService.createUserProfile({\n      userId: user.id,\n      ...profileData,\n      resumeParsedData,\n      completionPercentage,\n    });\n    \n    res.status(201).json(profile);\n  } catch (error) {\n    console.error('Error creating profile:', error);\n    res.status(500).json({ \n      message: 'Failed to create profile',\n      error: error.message \n    });\n  }\n});\n\n// Update user profile\nrouter.put('/', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Validate request body\n    const validationResult = updateProfileSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({ \n        message: 'Invalid profile data',\n        errors: validationResult.error.errors \n      });\n    }\n    \n    const profileData = validationResult.data;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Process resume if URL changed\n    let resumeParsedData = undefined;\n    if (profileData.resumeUrl) {\n      try {\n        resumeParsedData = await resumeParser.parseFromUrl(profileData.resumeUrl);\n      } catch (error) {\n        console.error('Resume parsing error:', error);\n      }\n    }\n    \n    if (resumeParsedData) {\n      profileData.resumeParsedData = resumeParsedData;\n    }\n    \n    // Calculate updated completion percentage\n    const existingProfile = await firestoreService.getUserProfile(user.id);\n    const mergedData = { ...existingProfile, ...profileData };\n    const completionPercentage = calculateCompletionPercentage(mergedData);\n    \n    const updatedProfile = await firestoreService.updateUserProfile(user.id, {\n      ...profileData,\n      completionPercentage,\n    });\n    \n    res.json(updatedProfile);\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    res.status(500).json({ \n      message: 'Failed to update profile',\n      error: error.message \n    });\n  }\n});\n\n// Get user statistics\nrouter.get('/stats', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const stats = await firestoreService.getUserStats(user.id);\n    res.json(stats);\n  } catch (error) {\n    console.error('Error getting user stats:', error);\n    res.status(500).json({ \n      message: 'Failed to get user statistics',\n      error: error.message \n    });\n  }\n});\n\n// Get user activity\nrouter.get('/activity', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const limit = Math.min(parseInt(req.query.limit as string) || 10, 50);\n    const activities = await firestoreService.getUserActivity(user.id, limit);\n    \n    res.json(activities);\n  } catch (error) {\n    console.error('Error getting user activity:', error);\n    res.status(500).json({ \n      message: 'Failed to get user activity',\n      error: error.message \n    });\n  }\n});\n\n// Upload and parse resume\nrouter.post('/upload-resume', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const { resumeUrl } = req.body;\n    if (!resumeUrl) {\n      return res.status(400).json({ message: 'Resume URL is required' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Parse resume\n    const resumeParsedData = await resumeParser.parseFromUrl(resumeUrl);\n    \n    // Update profile with resume data\n    await firestoreService.updateUserProfile(user.id, {\n      resumeUrl,\n      resumeParsedData,\n    });\n    \n    res.json({\n      message: 'Resume processed successfully',\n      parsedData: resumeParsedData,\n    });\n  } catch (error) {\n    console.error('Error processing resume:', error);\n    res.status(500).json({ \n      message: 'Failed to process resume',\n      error: error.message \n    });\n  }\n});\n\n// Helper function to calculate profile completion percentage\nfunction calculateCompletionPercentage(profileData: any): number {\n  const fields = [\n    'title',\n    'bio',\n    'location',\n    'experience',\n    'education',\n    'interests',\n    'skills',\n  ];\n  \n  let completedFields = 0;\n  const totalFields = fields.length;\n  \n  fields.forEach(field => {\n    const value = profileData[field];\n    if (value !== null && value !== undefined) {\n      if (Array.isArray(value) && value.length > 0) {\n        completedFields++;\n      } else if (typeof value === 'string' && value.trim().length > 0) {\n        completedFields++;\n      } else if (typeof value === 'object' && Object.keys(value).length > 0) {\n        completedFields++;\n      } else if (typeof value !== 'string' && typeof value !== 'object') {\n        completedFields++;\n      }\n    }\n  });\n  \n  // Add bonus for resume\n  if (profileData.resumeUrl) {\n    completedFields += 0.5;\n  }\n  \n  return Math.min(100, Math.round((completedFields / totalFields) * 100));\n}\n\nexport default router;\n","size_bytes":10058},"server/routes/roadmap.ts":{"content":"import { Router } from 'express';\nimport { authenticateToken, requireCompleteProfile, AuthenticatedRequest } from '../middleware/auth';\nimport { firestoreService } from '../services/firestoreService';\nimport { aiService } from '../services/ai';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schemas\nconst createRoadmapSchema = z.object({\n  careerId: z.string().min(1, 'Career ID is required'),\n  customTitle: z.string().optional(),\n  customDescription: z.string().optional(),\n});\n\nconst updateProgressSchema = z.object({\n  milestoneId: z.string().min(1, 'Milestone ID is required'),\n  status: z.enum(['not_started', 'in_progress', 'completed']),\n  notes: z.string().optional(),\n});\n\n// Get user's roadmaps\nrouter.get('/', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const roadmaps = await firestoreService.getUserRoadmaps(user.id);\n    \n    // Get progress for each roadmap\n    const roadmapsWithProgress = await Promise.all(\n      roadmaps.map(async (roadmap) => {\n        const progress = await firestoreService.getUserProgress(user.id, roadmap.id);\n        \n        // Calculate overall progress\n        const totalMilestones = roadmap.milestones?.length || 0;\n        const completedMilestones = progress.filter(p => p.status === 'completed').length;\n        const inProgressMilestones = progress.filter(p => p.status === 'in_progress').length;\n        \n        const totalProgress = totalMilestones > 0 \n          ? Math.round(((completedMilestones + (inProgressMilestones * 0.5)) / totalMilestones) * 100)\n          : 0;\n        \n        // Add progress info to milestones\n        const milestonesWithProgress = roadmap.milestones?.map(milestone => {\n          const milestoneProgress = progress.find(p => p.milestoneId === milestone.id);\n          return {\n            ...milestone,\n            status: milestoneProgress?.status || 'not_started',\n            progress: milestoneProgress?.status === 'in_progress' ? 50 : \n                     milestoneProgress?.status === 'completed' ? 100 : 0,\n            notes: milestoneProgress?.notes,\n            completedAt: milestoneProgress?.completedAt,\n          };\n        });\n        \n        return {\n          ...roadmap,\n          milestones: milestonesWithProgress,\n          totalProgress,\n        };\n      })\n    );\n    \n    res.json(roadmapsWithProgress);\n  } catch (error) {\n    console.error('Error getting roadmaps:', error);\n    res.status(500).json({ \n      message: 'Failed to get roadmaps',\n      error: error.message \n    });\n  }\n});\n\n// Get current/active roadmap\nrouter.get('/current', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const roadmaps = await firestoreService.getUserRoadmaps(user.id);\n    \n    if (roadmaps.length === 0) {\n      return res.json(null);\n    }\n    \n    // Get the most recent roadmap\n    const currentRoadmap = roadmaps[0];\n    const progress = await firestoreService.getUserProgress(user.id, currentRoadmap.id);\n    \n    // Calculate progress\n    const totalMilestones = currentRoadmap.milestones?.length || 0;\n    const completedMilestones = progress.filter(p => p.status === 'completed').length;\n    const inProgressMilestones = progress.filter(p => p.status === 'in_progress').length;\n    \n    const totalProgress = totalMilestones > 0 \n      ? Math.round(((completedMilestones + (inProgressMilestones * 0.5)) / totalMilestones) * 100)\n      : 0;\n    \n    // Add progress info to milestones\n    const milestonesWithProgress = currentRoadmap.milestones?.map(milestone => {\n      const milestoneProgress = progress.find(p => p.milestoneId === milestone.id);\n      return {\n        ...milestone,\n        status: milestoneProgress?.status || 'not_started',\n        progress: milestoneProgress?.status === 'in_progress' ? 50 : \n                 milestoneProgress?.status === 'completed' ? 100 : 0,\n      };\n    });\n    \n    const result = {\n      ...currentRoadmap,\n      milestones: milestonesWithProgress,\n      totalProgress,\n    };\n    \n    res.json(result);\n  } catch (error) {\n    console.error('Error getting current roadmap:', error);\n    res.status(500).json({ \n      message: 'Failed to get current roadmap',\n      error: error.message \n    });\n  }\n});\n\n// Generate new roadmap\nrouter.post('/', authenticateToken, requireCompleteProfile, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Validate request body\n    const validationResult = createRoadmapSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({ \n        message: 'Invalid roadmap data',\n        errors: validationResult.error.errors \n      });\n    }\n    \n    const { careerId, customTitle, customDescription } = validationResult.data;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    if (!profile) {\n      return res.status(404).json({ message: 'Profile not found' });\n    }\n    \n    const career = await firestoreService.getCareerById(careerId);\n    if (!career) {\n      return res.status(404).json({ message: 'Career not found' });\n    }\n    \n    // Generate AI roadmap\n    const aiRoadmap = await aiService.generateCareerRoadmap(profile, career);\n    \n    // Create roadmap in database\n    const roadmapData = {\n      userId: user.id,\n      careerId,\n      title: customTitle || aiRoadmap.title,\n      description: customDescription || aiRoadmap.description,\n      milestones: aiRoadmap.milestones.map((milestone: any) => ({\n        ...milestone,\n        id: `milestone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      })),\n      totalEstimatedTime: aiRoadmap.totalEstimatedTime,\n      difficulty: aiRoadmap.difficulty,\n    };\n    \n    const roadmap = await firestoreService.createRoadmap(roadmapData);\n    \n    res.status(201).json({\n      message: 'Roadmap generated successfully',\n      roadmap: {\n        ...roadmap,\n        totalProgress: 0,\n        milestones: roadmap.milestones?.map(milestone => ({\n          ...milestone,\n          status: 'not_started',\n          progress: 0,\n        })),\n      },\n    });\n  } catch (error) {\n    console.error('Error generating roadmap:', error);\n    res.status(500).json({ \n      message: 'Failed to generate roadmap',\n      error: error.message \n    });\n  }\n});\n\n// Get specific roadmap\nrouter.get('/:roadmapId', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const { roadmapId } = req.params;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const roadmap = await firestoreService.getRoadmapById(roadmapId);\n    if (!roadmap) {\n      return res.status(404).json({ message: 'Roadmap not found' });\n    }\n    \n    // Verify ownership\n    if (roadmap.userId !== user.id) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    \n    const progress = await firestoreService.getUserProgress(user.id, roadmapId);\n    \n    // Calculate progress\n    const totalMilestones = roadmap.milestones?.length || 0;\n    const completedMilestones = progress.filter(p => p.status === 'completed').length;\n    const inProgressMilestones = progress.filter(p => p.status === 'in_progress').length;\n    \n    const totalProgress = totalMilestones > 0 \n      ? Math.round(((completedMilestones + (inProgressMilestones * 0.5)) / totalMilestones) * 100)\n      : 0;\n    \n    // Add progress info to milestones\n    const milestonesWithProgress = roadmap.milestones?.map(milestone => {\n      const milestoneProgress = progress.find(p => p.milestoneId === milestone.id);\n      return {\n        ...milestone,\n        status: milestoneProgress?.status || 'not_started',\n        progress: milestoneProgress?.status === 'in_progress' ? 50 : \n                 milestoneProgress?.status === 'completed' ? 100 : 0,\n        notes: milestoneProgress?.notes,\n        completedAt: milestoneProgress?.completedAt,\n      };\n    });\n    \n    const result = {\n      ...roadmap,\n      milestones: milestonesWithProgress,\n      totalProgress,\n    };\n    \n    res.json(result);\n  } catch (error) {\n    console.error('Error getting roadmap:', error);\n    res.status(500).json({ \n      message: 'Failed to get roadmap',\n      error: error.message \n    });\n  }\n});\n\n// Update milestone progress\nrouter.post('/:roadmapId/progress', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Validate request body\n    const validationResult = updateProgressSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({ \n        message: 'Invalid progress data',\n        errors: validationResult.error.errors \n      });\n    }\n    \n    const { roadmapId } = req.params;\n    const { milestoneId, status, notes } = validationResult.data;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const roadmap = await firestoreService.getRoadmapById(roadmapId);\n    if (!roadmap) {\n      return res.status(404).json({ message: 'Roadmap not found' });\n    }\n    \n    // Verify ownership\n    if (roadmap.userId !== user.id) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    \n    // Verify milestone exists in roadmap\n    const milestone = roadmap.milestones?.find(m => m.id === milestoneId);\n    if (!milestone) {\n      return res.status(404).json({ message: 'Milestone not found in roadmap' });\n    }\n    \n    // Check if progress record exists\n    const existingProgress = await firestoreService.getUserProgress(user.id, roadmapId);\n    const milestoneProgress = existingProgress.find(p => p.milestoneId === milestoneId);\n    \n    let updatedProgress;\n    if (milestoneProgress) {\n      // Update existing progress\n      updatedProgress = await firestoreService.updateUserProgress(milestoneProgress.id, {\n        status,\n        notes,\n        completedAt: status === 'completed' ? new Date() : null,\n      });\n    } else {\n      // Create new progress record\n      updatedProgress = await firestoreService.createUserProgress({\n        userId: user.id,\n        roadmapId,\n        milestoneId,\n        status,\n        notes,\n        completedAt: status === 'completed' ? new Date() : undefined,\n      });\n    }\n    \n    res.json({\n      message: 'Progress updated successfully',\n      progress: updatedProgress,\n    });\n  } catch (error) {\n    console.error('Error updating progress:', error);\n    res.status(500).json({ \n      message: 'Failed to update progress',\n      error: error.message \n    });\n  }\n});\n\n// Delete roadmap\nrouter.delete('/:roadmapId', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const { roadmapId } = req.params;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const roadmap = await firestoreService.getRoadmapById(roadmapId);\n    if (!roadmap) {\n      return res.status(404).json({ message: 'Roadmap not found' });\n    }\n    \n    // Verify ownership\n    if (roadmap.userId !== user.id) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    \n    // Soft delete by setting isActive to false\n    await firestoreService.updateRoadmap(roadmapId, { isActive: false });\n    \n    res.json({ message: 'Roadmap deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting roadmap:', error);\n    res.status(500).json({ \n      message: 'Failed to delete roadmap',\n      error: error.message \n    });\n  }\n});\n\nexport default router;\n","size_bytes":12787},"server/routes/upload.ts":{"content":"import { Router } from 'express';\nimport { authenticateToken, AuthenticatedRequest } from '../middleware/auth';\nimport { uploadResumeFile } from '../services/firebase';\nimport multer from 'multer';\nimport { resumeParser } from '../services/resumeParser';\nimport { firestoreService } from '../services/firestoreService';\n\nconst router = Router();\n\n// Configure multer for file upload\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow PDF, DOC, and DOCX files\n    const allowedMimes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    ];\n    \n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, DOC, and DOCX files are allowed.'));\n    }\n  },\n});\n\n// Upload resume file\nrouter.post('/resume', authenticateToken, upload.single('resume'), async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    if (!req.file) {\n      return res.status(400).json({ message: 'No file uploaded' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Create a file object from the buffer\n    const file = new File([req.file.buffer], req.file.originalname, {\n      type: req.file.mimetype,\n    });\n    \n    // Upload to Firebase Storage\n    const resumeUrl = await uploadResumeFile(file, user.firebaseUid);\n    \n    // Parse resume content\n    let parsedData = null;\n    try {\n      parsedData = await resumeParser.parseBuffer(req.file.buffer);\n    } catch (parseError) {\n      console.error('Resume parsing error:', parseError);\n      // Continue without parsed data - file is still uploaded\n    }\n    \n    // Update user profile with resume URL and parsed data\n    const profile = await firestoreService.getUserProfile(user.id);\n    if (profile) {\n      await firestoreService.updateUserProfile(user.id, {\n        resumeUrl,\n        resumeParsedData: parsedData,\n      });\n    }\n    \n    res.json({\n      message: 'Resume uploaded successfully',\n      resumeUrl,\n      parsedData,\n    });\n  } catch (error) {\n    console.error('Error uploading resume:', error);\n    \n    if (error.message.includes('Invalid file type')) {\n      return res.status(400).json({ \n        message: error.message,\n        error: 'INVALID_FILE_TYPE' \n      });\n    }\n    \n    if (error.message.includes('File too large')) {\n      return res.status(400).json({ \n        message: 'File size exceeds 10MB limit',\n        error: 'FILE_TOO_LARGE' \n      });\n    }\n    \n    res.status(500).json({ \n      message: 'Failed to upload resume',\n      error: error.message \n    });\n  }\n});\n\n// Get resume parsing status\nrouter.get('/resume/status/:fileName', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const { fileName } = req.params;\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    if (!profile || !profile.resumeUrl) {\n      return res.status(404).json({ message: 'Resume not found' });\n    }\n    \n    // Check if the resume URL contains the requested file name\n    if (!profile.resumeUrl.includes(fileName)) {\n      return res.status(404).json({ message: 'Resume file not found' });\n    }\n    \n    res.json({\n      status: profile.resumeParsedData ? 'completed' : 'processing',\n      resumeUrl: profile.resumeUrl,\n      parsedData: profile.resumeParsedData,\n    });\n  } catch (error) {\n    console.error('Error getting resume status:', error);\n    res.status(500).json({ \n      message: 'Failed to get resume status',\n      error: error.message \n    });\n  }\n});\n\n// Re-process existing resume\nrouter.post('/resume/reprocess', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await firestoreService.getUserByFirebaseUid(req.user.uid);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const profile = await firestoreService.getUserProfile(user.id);\n    if (!profile || !profile.resumeUrl) {\n      return res.status(404).json({ message: 'No resume found to reprocess' });\n    }\n    \n    // Re-parse the existing resume\n    const parsedData = await resumeParser.parseFromUrl(profile.resumeUrl);\n    \n    // Update profile with new parsed data\n    await firestoreService.updateUserProfile(user.id, {\n      resumeParsedData: parsedData,\n    });\n    \n    res.json({\n      message: 'Resume reprocessed successfully',\n      parsedData,\n    });\n  } catch (error) {\n    console.error('Error reprocessing resume:', error);\n    res.status(500).json({ \n      message: 'Failed to reprocess resume',\n      error: error.message \n    });\n  }\n});\n\n// Error handling middleware for multer\nrouter.use((error: any, req: any, res: any, next: any) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ \n        message: 'File size exceeds 10MB limit',\n        error: 'FILE_TOO_LARGE' \n      });\n    }\n    \n    return res.status(400).json({ \n      message: 'File upload error',\n      error: error.code \n    });\n  }\n  \n  next(error);\n});\n\nexport default router;\n","size_bytes":5804},"server/scripts/seedCareers.ts":{"content":"import { firestoreService } from '../services/firestoreService';\nimport { embeddingService } from '../services/embeddings';\nimport { InsertCareer } from '@shared/schema';\n\n// Sample career data for the Indian job market\nconst INDIAN_CAREERS: Omit<InsertCareer, 'embedding'>[] = [\n  {\n    title: 'Full Stack Developer',\n    description: 'Build end-to-end web applications using modern technologies like React, Node.js, and cloud platforms. Work with both frontend and backend systems to create scalable solutions.',\n    requirements: [\n      'Develop responsive web applications using React, Angular, or Vue.js',\n      'Build RESTful APIs and microservices using Node.js, Python, or Java',\n      'Design and implement database schemas and queries',\n      'Deploy applications on cloud platforms like AWS, Azure, or GCP',\n      'Collaborate with UI/UX designers and product managers',\n      'Write clean, maintainable, and well-documented code'\n    ],\n    skills: [\n      { name: 'React', level: 'advanced', category: 'technical' },\n      { name: 'Node.js', level: 'advanced', category: 'technical' },\n      { name: 'JavaScript', level: 'expert', category: 'technical' },\n      { name: 'TypeScript', level: 'intermediate', category: 'technical' },\n      { name: 'MongoDB', level: 'intermediate', category: 'technical' },\n      { name: 'Express.js', level: 'advanced', category: 'technical' },\n      { name: 'Git', level: 'advanced', category: 'technical' },\n      { name: 'Problem Solving', level: 'advanced', category: 'soft' },\n      { name: 'Communication', level: 'intermediate', category: 'soft' }\n    ],\n    salaryRange: { min: 8, max: 15, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Bangalore', 'Hyderabad', 'Delhi', 'Pune', 'Chennai'],\n    industry: 'Technology',\n    growthPath: [\n      { level: 'Junior', title: 'Junior Full Stack Developer', salaryRange: { min: 4, max: 8 }, experience: '0-2 years' },\n      { level: 'Mid', title: 'Full Stack Developer', salaryRange: { min: 8, max: 15 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Full Stack Developer', salaryRange: { min: 15, max: 25 }, experience: '5-8 years' },\n      { level: 'Lead', title: 'Tech Lead', salaryRange: { min: 25, max: 40 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Data Scientist',\n    description: 'Analyze large datasets to extract meaningful insights and build predictive models. Use statistical methods and machine learning to solve complex business problems.',\n    requirements: [\n      'Collect, clean, and analyze large datasets from various sources',\n      'Build machine learning models for prediction and classification',\n      'Create data visualizations and dashboards for stakeholders',\n      'Conduct A/B testing and statistical analysis',\n      'Collaborate with engineering teams to deploy ML models',\n      'Communicate findings to non-technical stakeholders'\n    ],\n    skills: [\n      { name: 'Python', level: 'expert', category: 'technical' },\n      { name: 'R', level: 'advanced', category: 'technical' },\n      { name: 'SQL', level: 'advanced', category: 'technical' },\n      { name: 'Machine Learning', level: 'advanced', category: 'technical' },\n      { name: 'Pandas', level: 'expert', category: 'technical' },\n      { name: 'NumPy', level: 'advanced', category: 'technical' },\n      { name: 'Scikit-learn', level: 'advanced', category: 'technical' },\n      { name: 'Tableau', level: 'intermediate', category: 'technical' },\n      { name: 'Statistics', level: 'advanced', category: 'domain' },\n      { name: 'Critical Thinking', level: 'advanced', category: 'soft' }\n    ],\n    salaryRange: { min: 12, max: 25, currency: 'INR_LPA' },\n    locations: ['Bangalore', 'Mumbai', 'Hyderabad', 'Delhi', 'Pune'],\n    industry: 'Technology',\n    growthPath: [\n      { level: 'Junior', title: 'Junior Data Scientist', salaryRange: { min: 6, max: 12 }, experience: '0-2 years' },\n      { level: 'Mid', title: 'Data Scientist', salaryRange: { min: 12, max: 25 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Data Scientist', salaryRange: { min: 25, max: 40 }, experience: '5-8 years' },\n      { level: 'Lead', title: 'Principal Data Scientist', salaryRange: { min: 40, max: 60 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Digital Marketing Manager',\n    description: 'Develop and execute digital marketing strategies across multiple channels including social media, search engines, and email marketing to drive brand awareness and customer acquisition.',\n    requirements: [\n      'Plan and execute digital marketing campaigns across platforms',\n      'Manage social media presence and content strategy',\n      'Optimize website and content for search engines (SEO)',\n      'Run and optimize paid advertising campaigns (Google Ads, Facebook Ads)',\n      'Analyze campaign performance and ROI metrics',\n      'Collaborate with creative teams for campaign assets'\n    ],\n    skills: [\n      { name: 'Google Analytics', level: 'advanced', category: 'technical' },\n      { name: 'Social Media Marketing', level: 'expert', category: 'domain' },\n      { name: 'SEO', level: 'advanced', category: 'domain' },\n      { name: 'SEM', level: 'advanced', category: 'domain' },\n      { name: 'Content Marketing', level: 'advanced', category: 'domain' },\n      { name: 'Email Marketing', level: 'intermediate', category: 'domain' },\n      { name: 'Adobe Creative Suite', level: 'intermediate', category: 'technical' },\n      { name: 'Leadership', level: 'advanced', category: 'soft' },\n      { name: 'Creativity', level: 'advanced', category: 'soft' }\n    ],\n    salaryRange: { min: 10, max: 20, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Delhi', 'Bangalore', 'Pune', 'Chennai', 'Hyderabad'],\n    industry: 'Marketing',\n    growthPath: [\n      { level: 'Associate', title: 'Digital Marketing Associate', salaryRange: { min: 4, max: 8 }, experience: '0-2 years' },\n      { level: 'Executive', title: 'Digital Marketing Executive', salaryRange: { min: 6, max: 12 }, experience: '1-3 years' },\n      { level: 'Manager', title: 'Digital Marketing Manager', salaryRange: { min: 10, max: 20 }, experience: '3-6 years' },\n      { level: 'Head', title: 'Head of Digital Marketing', salaryRange: { min: 20, max: 35 }, experience: '6+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Product Manager',\n    description: 'Drive product strategy and development from conception to launch. Work closely with engineering, design, and business teams to deliver products that meet customer needs and business objectives.',\n    requirements: [\n      'Define product roadmap and prioritize features based on user needs',\n      'Conduct market research and competitive analysis',\n      'Work with engineering teams to plan and execute product development',\n      'Gather and analyze user feedback and product metrics',\n      'Coordinate product launches and go-to-market strategies',\n      'Communicate product vision to stakeholders and leadership'\n    ],\n    skills: [\n      { name: 'Product Strategy', level: 'expert', category: 'domain' },\n      { name: 'User Research', level: 'advanced', category: 'domain' },\n      { name: 'Agile Methodologies', level: 'advanced', category: 'domain' },\n      { name: 'Data Analysis', level: 'advanced', category: 'technical' },\n      { name: 'SQL', level: 'intermediate', category: 'technical' },\n      { name: 'Wireframing', level: 'intermediate', category: 'technical' },\n      { name: 'Leadership', level: 'expert', category: 'soft' },\n      { name: 'Communication', level: 'expert', category: 'soft' },\n      { name: 'Strategic Thinking', level: 'advanced', category: 'soft' }\n    ],\n    salaryRange: { min: 15, max: 30, currency: 'INR_LPA' },\n    locations: ['Bangalore', 'Mumbai', 'Delhi', 'Hyderabad', 'Pune'],\n    industry: 'Technology',\n    growthPath: [\n      { level: 'Associate', title: 'Associate Product Manager', salaryRange: { min: 8, max: 15 }, experience: '0-2 years' },\n      { level: 'Manager', title: 'Product Manager', salaryRange: { min: 15, max: 30 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Product Manager', salaryRange: { min: 25, max: 45 }, experience: '5-8 years' },\n      { level: 'Director', title: 'Director of Product', salaryRange: { min: 40, max: 70 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'UI/UX Designer',\n    description: 'Create intuitive and visually appealing user interfaces and experiences for web and mobile applications. Conduct user research and testing to inform design decisions.',\n    requirements: [\n      'Design user interfaces for web and mobile applications',\n      'Conduct user research and usability testing',\n      'Create wireframes, prototypes, and design systems',\n      'Collaborate with developers to implement designs',\n      'Ensure designs meet accessibility standards',\n      'Stay updated with design trends and best practices'\n    ],\n    skills: [\n      { name: 'Figma', level: 'expert', category: 'technical' },\n      { name: 'Adobe XD', level: 'advanced', category: 'technical' },\n      { name: 'Sketch', level: 'advanced', category: 'technical' },\n      { name: 'User Research', level: 'advanced', category: 'domain' },\n      { name: 'Prototyping', level: 'expert', category: 'domain' },\n      { name: 'Design Systems', level: 'advanced', category: 'domain' },\n      { name: 'HTML/CSS', level: 'intermediate', category: 'technical' },\n      { name: 'Creativity', level: 'expert', category: 'soft' },\n      { name: 'Empathy', level: 'advanced', category: 'soft' }\n    ],\n    salaryRange: { min: 8, max: 18, currency: 'INR_LPA' },\n    locations: ['Bangalore', 'Mumbai', 'Delhi', 'Pune', 'Hyderabad', 'Chennai'],\n    industry: 'Design',\n    growthPath: [\n      { level: 'Junior', title: 'Junior UI/UX Designer', salaryRange: { min: 4, max: 8 }, experience: '0-2 years' },\n      { level: 'Mid', title: 'UI/UX Designer', salaryRange: { min: 8, max: 18 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior UI/UX Designer', salaryRange: { min: 15, max: 28 }, experience: '5-8 years' },\n      { level: 'Lead', title: 'Design Lead', salaryRange: { min: 25, max: 45 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'DevOps Engineer',\n    description: 'Automate and optimize software deployment, infrastructure management, and continuous integration/continuous deployment (CI/CD) processes to ensure reliable and scalable systems.',\n    requirements: [\n      'Design and maintain CI/CD pipelines for automated deployments',\n      'Manage cloud infrastructure on AWS, Azure, or Google Cloud',\n      'Implement monitoring and alerting systems',\n      'Automate infrastructure provisioning using Infrastructure as Code',\n      'Ensure system security and compliance',\n      'Troubleshoot and resolve production issues'\n    ],\n    skills: [\n      { name: 'AWS', level: 'advanced', category: 'technical' },\n      { name: 'Docker', level: 'advanced', category: 'technical' },\n      { name: 'Kubernetes', level: 'advanced', category: 'technical' },\n      { name: 'Jenkins', level: 'advanced', category: 'technical' },\n      { name: 'Terraform', level: 'advanced', category: 'technical' },\n      { name: 'Linux', level: 'expert', category: 'technical' },\n      { name: 'Python', level: 'intermediate', category: 'technical' },\n      { name: 'Bash Scripting', level: 'advanced', category: 'technical' },\n      { name: 'Problem Solving', level: 'expert', category: 'soft' }\n    ],\n    salaryRange: { min: 12, max: 22, currency: 'INR_LPA' },\n    locations: ['Bangalore', 'Hyderabad', 'Mumbai', 'Delhi', 'Pune'],\n    industry: 'Technology',\n    growthPath: [\n      { level: 'Junior', title: 'Junior DevOps Engineer', salaryRange: { min: 6, max: 12 }, experience: '0-2 years' },\n      { level: 'Mid', title: 'DevOps Engineer', salaryRange: { min: 12, max: 22 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior DevOps Engineer', salaryRange: { min: 20, max: 35 }, experience: '5-8 years' },\n      { level: 'Architect', title: 'DevOps Architect', salaryRange: { min: 30, max: 50 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Business Analyst',\n    description: 'Analyze business processes and requirements to identify opportunities for improvement. Bridge the gap between business stakeholders and technical teams to deliver effective solutions.',\n    requirements: [\n      'Gather and analyze business requirements from stakeholders',\n      'Document business processes and create process flow diagrams',\n      'Identify opportunities for process improvement and automation',\n      'Create functional specifications for development teams',\n      'Conduct user acceptance testing and training',\n      'Prepare reports and presentations for management'\n    ],\n    skills: [\n      { name: 'Business Process Analysis', level: 'expert', category: 'domain' },\n      { name: 'Requirements Gathering', level: 'expert', category: 'domain' },\n      { name: 'SQL', level: 'advanced', category: 'technical' },\n      { name: 'Excel', level: 'expert', category: 'technical' },\n      { name: 'Power BI', level: 'advanced', category: 'technical' },\n      { name: 'Visio', level: 'intermediate', category: 'technical' },\n      { name: 'Agile Methodologies', level: 'advanced', category: 'domain' },\n      { name: 'Communication', level: 'expert', category: 'soft' },\n      { name: 'Analytical Thinking', level: 'expert', category: 'soft' }\n    ],\n    salaryRange: { min: 8, max: 16, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Pune', 'Chennai'],\n    industry: 'Consulting',\n    growthPath: [\n      { level: 'Associate', title: 'Associate Business Analyst', salaryRange: { min: 4, max: 8 }, experience: '0-2 years' },\n      { level: 'Analyst', title: 'Business Analyst', salaryRange: { min: 8, max: 16 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Business Analyst', salaryRange: { min: 14, max: 25 }, experience: '5-8 years' },\n      { level: 'Manager', title: 'Business Analysis Manager', salaryRange: { min: 22, max: 40 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Content Writer',\n    description: 'Create engaging and informative content for various platforms including websites, blogs, social media, and marketing materials. Adapt writing style to different audiences and brand voices.',\n    requirements: [\n      'Write compelling content for websites, blogs, and marketing materials',\n      'Conduct research on industry topics and trends',\n      'Optimize content for search engines (SEO)',\n      'Collaborate with marketing teams on content strategy',\n      'Proofread and edit content for accuracy and consistency',\n      'Maintain brand voice and style across all content'\n    ],\n    skills: [\n      { name: 'Content Writing', level: 'expert', category: 'domain' },\n      { name: 'SEO Writing', level: 'advanced', category: 'domain' },\n      { name: 'Research Skills', level: 'advanced', category: 'domain' },\n      { name: 'WordPress', level: 'intermediate', category: 'technical' },\n      { name: 'Google Analytics', level: 'intermediate', category: 'technical' },\n      { name: 'Social Media', level: 'advanced', category: 'domain' },\n      { name: 'Creativity', level: 'expert', category: 'soft' },\n      { name: 'Attention to Detail', level: 'expert', category: 'soft' },\n      { name: 'Time Management', level: 'advanced', category: 'soft' }\n    ],\n    salaryRange: { min: 4, max: 10, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Delhi', 'Bangalore', 'Pune', 'Chennai', 'Hyderabad'],\n    industry: 'Media',\n    growthPath: [\n      { level: 'Junior', title: 'Junior Content Writer', salaryRange: { min: 2, max: 4 }, experience: '0-1 years' },\n      { level: 'Mid', title: 'Content Writer', salaryRange: { min: 4, max: 10 }, experience: '1-4 years' },\n      { level: 'Senior', title: 'Senior Content Writer', salaryRange: { min: 8, max: 15 }, experience: '4-7 years' },\n      { level: 'Lead', title: 'Content Manager', salaryRange: { min: 12, max: 22 }, experience: '7+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Cybersecurity Analyst',\n    description: 'Protect organizational systems and data from cyber threats. Monitor security incidents, implement security measures, and respond to security breaches and vulnerabilities.',\n    requirements: [\n      'Monitor security systems and identify potential threats',\n      'Investigate security incidents and breaches',\n      'Implement security policies and procedures',\n      'Conduct vulnerability assessments and penetration testing',\n      'Maintain security tools and systems',\n      'Provide security training and awareness to employees'\n    ],\n    skills: [\n      { name: 'Network Security', level: 'advanced', category: 'technical' },\n      { name: 'Ethical Hacking', level: 'advanced', category: 'technical' },\n      { name: 'SIEM Tools', level: 'advanced', category: 'technical' },\n      { name: 'Incident Response', level: 'advanced', category: 'domain' },\n      { name: 'Risk Assessment', level: 'advanced', category: 'domain' },\n      { name: 'Compliance', level: 'intermediate', category: 'domain' },\n      { name: 'Linux', level: 'advanced', category: 'technical' },\n      { name: 'Python', level: 'intermediate', category: 'technical' },\n      { name: 'Critical Thinking', level: 'expert', category: 'soft' }\n    ],\n    salaryRange: { min: 10, max: 20, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai'],\n    industry: 'Cybersecurity',\n    growthPath: [\n      { level: 'Junior', title: 'Junior Security Analyst', salaryRange: { min: 5, max: 10 }, experience: '0-2 years' },\n      { level: 'Mid', title: 'Cybersecurity Analyst', salaryRange: { min: 10, max: 20 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Security Analyst', salaryRange: { min: 18, max: 30 }, experience: '5-8 years' },\n      { level: 'Manager', title: 'Security Manager', salaryRange: { min: 25, max: 45 }, experience: '8+ years' }\n    ],\n    isActive: true\n  },\n  {\n    title: 'Financial Analyst',\n    description: 'Analyze financial data and market trends to provide insights for investment decisions, budgeting, and strategic planning. Prepare financial reports and presentations for management.',\n    requirements: [\n      'Analyze financial statements and market data',\n      'Prepare financial models and forecasts',\n      'Conduct industry and competitive analysis',\n      'Create reports and presentations for stakeholders',\n      'Support budgeting and planning processes',\n      'Monitor key performance indicators and metrics'\n    ],\n    skills: [\n      { name: 'Financial Modeling', level: 'expert', category: 'domain' },\n      { name: 'Excel', level: 'expert', category: 'technical' },\n      { name: 'Financial Analysis', level: 'expert', category: 'domain' },\n      { name: 'Valuation', level: 'advanced', category: 'domain' },\n      { name: 'Bloomberg Terminal', level: 'intermediate', category: 'technical' },\n      { name: 'SQL', level: 'intermediate', category: 'technical' },\n      { name: 'PowerPoint', level: 'advanced', category: 'technical' },\n      { name: 'Attention to Detail', level: 'expert', category: 'soft' },\n      { name: 'Analytical Thinking', level: 'expert', category: 'soft' }\n    ],\n    salaryRange: { min: 6, max: 15, currency: 'INR_LPA' },\n    locations: ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Hyderabad', 'Pune'],\n    industry: 'Finance',\n    growthPath: [\n      { level: 'Associate', title: 'Financial Analyst Associate', salaryRange: { min: 4, max: 8 }, experience: '0-2 years' },\n      { level: 'Analyst', title: 'Financial Analyst', salaryRange: { min: 6, max: 15 }, experience: '2-5 years' },\n      { level: 'Senior', title: 'Senior Financial Analyst', salaryRange: { min: 12, max: 22 }, experience: '5-8 years' },\n      { level: 'Manager', title: 'Finance Manager', salaryRange: { min: 18, max: 35 }, experience: '8+ years' }\n    ],\n    isActive: true\n  }\n];\n\n// Learning resources data for seeding\nconst LEARNING_RESOURCES = [\n  {\n    title: 'React Hooks Masterclass',\n    description: 'Master useState, useEffect, and custom hooks with practical projects',\n    type: 'course' as const,\n    url: 'https://www.udemy.com/course/react-hooks-masterclass',\n    provider: 'Udemy',\n    rating: 4.8,\n    duration: '8h 30m',\n    difficulty: 'intermediate' as const,\n    skills: ['react', 'javascript', 'hooks'],\n    isRecommended: true\n  },\n  {\n    title: 'Node.js Backend Development',\n    description: 'Build scalable server-side applications with Node.js and Express',\n    type: 'course' as const,\n    url: 'https://www.coursera.org/learn/nodejs-backend',\n    provider: 'Coursera',\n    rating: 4.6,\n    duration: '12h 15m',\n    difficulty: 'intermediate' as const,\n    skills: ['nodejs', 'express', 'backend'],\n    isRecommended: true\n  },\n  {\n    title: 'AWS Cloud Practitioner',\n    description: 'Get certified in cloud fundamentals with hands-on AWS experience',\n    type: 'certification' as const,\n    url: 'https://aws.amazon.com/certification/certified-cloud-practitioner',\n    provider: 'AWS',\n    rating: 4.7,\n    duration: '15h 45m',\n    difficulty: 'beginner' as const,\n    skills: ['aws', 'cloud', 'devops'],\n    isRecommended: true\n  },\n  {\n    title: 'Python for Data Science',\n    description: 'Learn Python, pandas, and machine learning for data analysis',\n    type: 'course' as const,\n    url: 'https://www.unacademy.com/course/python-data-science',\n    provider: 'Unacademy',\n    rating: 4.5,\n    duration: '20h 30m',\n    difficulty: 'beginner' as const,\n    skills: ['python', 'pandas', 'machine learning'],\n    isRecommended: true\n  },\n  {\n    title: 'Digital Marketing Fundamentals',\n    description: 'Complete guide to SEO, social media, and online advertising',\n    type: 'course' as const,\n    url: 'https://www.google.com/skillshop/course/digital-marketing',\n    provider: 'Google',\n    rating: 4.4,\n    duration: '6h 20m',\n    difficulty: 'beginner' as const,\n    skills: ['seo', 'social media marketing', 'google ads'],\n    isRecommended: true\n  },\n  {\n    title: 'UI/UX Design with Figma',\n    description: 'Create stunning user interfaces and prototypes using Figma',\n    type: 'course' as const,\n    url: 'https://www.youtube.com/playlist?list=PLWlUJU11tp4fEXI8deWhBQAHDv9R23WHB',\n    provider: 'YouTube',\n    rating: 4.3,\n    duration: '4h 45m',\n    difficulty: 'beginner' as const,\n    skills: ['figma', 'ui design', 'prototyping'],\n    isRecommended: true\n  },\n  {\n    title: 'Cybersecurity Essentials',\n    description: 'Learn network security, ethical hacking, and incident response',\n    type: 'course' as const,\n    url: 'https://www.cybrary.it/course/cybersecurity-fundamentals',\n    provider: 'Cybrary',\n    rating: 4.6,\n    duration: '18h 15m',\n    difficulty: 'intermediate' as const,\n    skills: ['network security', 'ethical hacking', 'incident response'],\n    isRecommended: true\n  },\n  {\n    title: 'Financial Modeling in Excel',\n    description: 'Build comprehensive financial models for business analysis',\n    type: 'course' as const,\n    url: 'https://www.edx.org/course/financial-modeling',\n    provider: 'edX',\n    rating: 4.5,\n    duration: '12h 30m',\n    difficulty: 'advanced' as const,\n    skills: ['excel', 'financial modeling', 'valuation'],\n    isRecommended: true\n  },\n  {\n    title: 'Content Writing for Digital Marketing',\n    description: 'Master SEO writing, copywriting, and content strategy',\n    type: 'course' as const,\n    url: 'https://www.skillshare.com/classes/content-writing-masterclass',\n    provider: 'Skillshare',\n    rating: 4.2,\n    duration: '5h 30m',\n    difficulty: 'beginner' as const,\n    skills: ['content writing', 'seo writing', 'copywriting'],\n    isRecommended: true\n  },\n  {\n    title: 'Product Management Fundamentals',\n    description: 'Learn product strategy, roadmapping, and stakeholder management',\n    type: 'course' as const,\n    url: 'https://www.coursera.org/specializations/product-management',\n    provider: 'Coursera',\n    rating: 4.7,\n    duration: '25h 45m',\n    difficulty: 'intermediate' as const,\n    skills: ['product strategy', 'user research', 'agile methodologies'],\n    isRecommended: true\n  }\n];\n\nasync function seedCareers() {\n  try {\n    console.log('üå± Starting career seeding process...');\n    \n    // Check if careers already exist\n    const existingCareers = await firestoreService.getCareers(1);\n    if (existingCareers.length > 0) {\n      console.log('‚úÖ Careers already exist, skipping seeding');\n      return;\n    }\n    \n    console.log('üìä Generating embeddings for careers...');\n    \n    // Generate embeddings for each career\n    const careersWithEmbeddings: InsertCareer[] = [];\n    \n    for (let i = 0; i < INDIAN_CAREERS.length; i++) {\n      const career = INDIAN_CAREERS[i];\n      console.log(`Processing ${i + 1}/${INDIAN_CAREERS.length}: ${career.title}`);\n      \n      try {\n        // Generate embedding for this career\n        const embedding = await embeddingService.generateCareerEmbedding({\n          title: career.title,\n          description: career.description,\n          skills: career.skills || [],\n          industry: career.industry || '',\n        });\n        \n        careersWithEmbeddings.push({\n          ...career,\n          embedding,\n        });\n        \n        // Small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error(`Error generating embedding for ${career.title}:`, error);\n        \n        // Use a default embedding (zeros) if generation fails\n        careersWithEmbeddings.push({\n          ...career,\n          embedding: new Array(768).fill(0), // Default embedding size\n        });\n      }\n    }\n    \n    console.log('üíæ Saving careers to Firestore...');\n    \n    // Batch create careers\n    const createdCareers = await firestoreService.batchCreateCareers(careersWithEmbeddings);\n    console.log(`‚úÖ Successfully created ${createdCareers.length} careers`);\n    \n    console.log('üìö Seeding learning resources...');\n    \n    // Create learning resources\n    const createdResources = await firestoreService.batchCreateLearningResources(LEARNING_RESOURCES);\n    console.log(`‚úÖ Successfully created ${createdResources.length} learning resources`);\n    \n    console.log('üéâ Career seeding completed successfully!');\n    \n    // Print summary\n    console.log('\\nüìã Seeding Summary:');\n    console.log(`   ‚Ä¢ Careers: ${createdCareers.length}`);\n    console.log(`   ‚Ä¢ Learning Resources: ${createdResources.length}`);\n    console.log(`   ‚Ä¢ Industries: ${[...new Set(careersWithEmbeddings.map(c => c.industry))].join(', ')}`);\n    \n  } catch (error) {\n    console.error('‚ùå Error during career seeding:', error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nif (require.main === module) {\n  seedCareers()\n    .then(() => {\n      console.log('‚úÖ Seeding completed');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('‚ùå Seeding failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { seedCareers };\n","size_bytes":27306},"server/services/ai.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\n// TODO: Uncomment when OpenAI is used as fallback\n// import OpenAI from 'openai';\n\ninterface AIProvider {\n  generateRoadmap(prompt: string): Promise<any>;\n  generateText(prompt: string): Promise<string>;\n}\n\nclass GeminiAIProvider implements AIProvider {\n  private client: GoogleGenerativeAI;\n  \n  constructor() {\n    const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('GEMINI_API_KEY or GOOGLE_AI_API_KEY environment variable is required');\n    }\n    this.client = new GoogleGenerativeAI(apiKey);\n  }\n  \n  async generateRoadmap(prompt: string): Promise<any> {\n    try {\n      // Use gemini-2.5-pro for complex structured output\n      const model = this.client.getGenerativeModel({ \n        model: 'gemini-2.5-pro',\n        generationConfig: {\n          responseMimeType: 'application/json',\n          responseSchema: {\n            type: 'object',\n            properties: {\n              title: { type: 'string' },\n              description: { type: 'string' },\n              totalEstimatedTime: { type: 'string' },\n              difficulty: { type: 'string', enum: ['beginner', 'intermediate', 'advanced'] },\n              milestones: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    title: { type: 'string' },\n                    description: { type: 'string' },\n                    skills: { type: 'array', items: { type: 'string' } },\n                    estimatedTime: { type: 'string' },\n                    order: { type: 'number' },\n                    resources: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          title: { type: 'string' },\n                          type: { type: 'string', enum: ['course', 'article', 'project', 'certification'] },\n                          url: { type: 'string' },\n                          provider: { type: 'string' }\n                        },\n                        required: ['title', 'type', 'url', 'provider']\n                      }\n                    }\n                  },\n                  required: ['id', 'title', 'description', 'skills', 'estimatedTime', 'order', 'resources']\n                }\n              }\n            },\n            required: ['title', 'description', 'totalEstimatedTime', 'difficulty', 'milestones']\n          }\n        }\n      });\n      \n      const result = await model.generateContent(prompt);\n      const responseText = result.response.text();\n      return JSON.parse(responseText);\n    } catch (error) {\n      console.error('Error generating roadmap with Gemini:', error);\n      throw new Error('Failed to generate roadmap');\n    }\n  }\n  \n  async generateText(prompt: string): Promise<string> {\n    try {\n      const model = this.client.getGenerativeModel({ model: 'gemini-2.5-flash' });\n      const result = await model.generateContent(prompt);\n      return result.response.text();\n    } catch (error) {\n      console.error('Error generating text with Gemini:', error);\n      throw new Error('Failed to generate text');\n    }\n  }\n}\n\nclass OpenAIProvider implements AIProvider {\n  // private client: OpenAI;\n  \n  constructor() {\n    // TODO: Uncomment when OpenAI is available as fallback\n    /*\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      throw new Error('OPENAI_API_KEY environment variable is required');\n    }\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    this.client = new OpenAI({ apiKey });\n    */\n    throw new Error('OpenAI provider not implemented yet - use as fallback');\n  }\n  \n  async generateRoadmap(prompt: string): Promise<any> {\n    /*\n    try {\n      const response = await this.client.chat.completions.create({\n        model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert career advisor. Generate a structured learning roadmap in JSON format.\"\n          },\n          { role: \"user\", content: prompt }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n      \n      return JSON.parse(response.choices[0].message.content || '{}');\n    } catch (error) {\n      console.error('Error generating roadmap with OpenAI:', error);\n      throw new Error('Failed to generate roadmap');\n    }\n    */\n    throw new Error('OpenAI provider not implemented yet');\n  }\n  \n  async generateText(prompt: string): Promise<string> {\n    throw new Error('OpenAI provider not implemented yet');\n  }\n}\n\nclass AIService {\n  private providers: AIProvider[] = [];\n  \n  constructor() {\n    // Try to initialize providers in order of preference\n    try {\n      this.providers.push(new GeminiAIProvider());\n      console.log('‚úÖ Gemini AI provider initialized');\n    } catch (error) {\n      console.warn('‚ùå Failed to initialize Gemini AI provider:', error.message);\n    }\n    \n    try {\n      this.providers.push(new OpenAIProvider());\n      console.log('‚úÖ OpenAI provider initialized');\n    } catch (error) {\n      console.warn('‚ùå Failed to initialize OpenAI provider:', error.message);\n    }\n    \n    if (this.providers.length === 0) {\n      console.warn('No AI providers available. Please configure GEMINI_API_KEY or OPENAI_API_KEY. Some features may be limited.');\n    }\n  }\n  \n  async generateCareerRoadmap(userProfile: any, targetCareer: any): Promise<any> {\n    const prompt = this.buildRoadmapPrompt(userProfile, targetCareer);\n    \n    for (const provider of this.providers) {\n      try {\n        return await provider.generateRoadmap(prompt);\n      } catch (error) {\n        console.warn('AI provider failed for roadmap generation, trying next:', error.message);\n        continue;\n      }\n    }\n    \n    throw new Error('All AI providers failed for roadmap generation');\n  }\n  \n  private buildRoadmapPrompt(userProfile: any, targetCareer: any): string {\n    const currentSkills = userProfile.skills?.map((s: any) => `${s.name} (${s.level})`).join(', ') || 'None specified';\n    const interests = userProfile.interests?.join(', ') || 'None specified';\n    const experience = userProfile.experience || 'fresher';\n    \n    return `\nCreate a personalized career roadmap for transitioning to a ${targetCareer.title} role in the Indian job market.\n\nUser Profile:\n- Current Experience: ${experience}\n- Current Skills: ${currentSkills}\n- Interests: ${interests}\n- Education: ${userProfile.education?.map((e: any) => `${e.degree} in ${e.field}`).join(', ') || 'Not specified'}\n\nTarget Career:\n- Role: ${targetCareer.title}\n- Industry: ${targetCareer.industry}\n- Required Skills: ${targetCareer.skills?.map((s: any) => `${s.name} (${s.level})`).join(', ')}\n- Salary Range: ‚Çπ${targetCareer.salaryRange?.min}-${targetCareer.salaryRange?.max} LPA\n\nGenerate a comprehensive 6-month learning roadmap with:\n1. 4-6 major milestones ordered by priority\n2. Each milestone should include specific skills to learn\n3. Realistic time estimates (weeks/months)\n4. Mix of free and paid learning resources from Indian platforms (Unacademy, BYJU'S, Coursera, Udemy, YouTube)\n5. Practical projects to build portfolio\n6. Relevant certifications for the Indian job market\n\nFocus on:\n- Skills gap analysis between current and required skills\n- Indian job market requirements and trends\n- Practical, hands-on learning approach\n- Building a portfolio that appeals to Indian employers\n- Networking and community engagement opportunities\n\nThe roadmap should be progressive, building from foundational concepts to advanced skills.\n`;\n  }\n  \n  async generateText(prompt: string): Promise<string> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.generateText(prompt);\n      } catch (error) {\n        console.warn('AI provider failed for text generation, trying next:', error.message);\n        continue;\n      }\n    }\n    \n    throw new Error('All AI providers failed for text generation');\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":8299},"server/services/embeddings.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// TODO: Import OpenAI as fallback\n// import OpenAI from 'openai';\n\ninterface EmbeddingProvider {\n  generateEmbedding(text: string): Promise<number[]>;\n  generateBatchEmbeddings(texts: string[]): Promise<number[][]>;\n}\n\nclass GeminiEmbeddingProvider implements EmbeddingProvider {\n  private client: GoogleGenerativeAI;\n  \n  constructor() {\n    const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('GEMINI_API_KEY or GOOGLE_AI_API_KEY environment variable is required');\n    }\n    this.client = new GoogleGenerativeAI(apiKey);\n  }\n  \n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      // Note: Using text-embedding-004 model which is suitable for semantic similarity\n      const model = this.client.getGenerativeModel({ model: 'text-embedding-004' });\n      const result = await model.embedContent(text);\n      return result.embedding.values || [];\n    } catch (error) {\n      console.error('Error generating Gemini embedding:', error);\n      throw new Error('Failed to generate embedding with Gemini');\n    }\n  }\n  \n  async generateBatchEmbeddings(texts: string[]): Promise<number[][]> {\n    // For batch processing, we'll process them individually for now\n    // TODO: Implement actual batch API when available\n    const embeddings: number[][] = [];\n    \n    for (const text of texts) {\n      try {\n        const embedding = await this.generateEmbedding(text);\n        embeddings.push(embedding);\n      } catch (error) {\n        console.error('Error in batch embedding:', error);\n        // Push zero vector as fallback\n        embeddings.push(new Array(768).fill(0)); // Default embedding size\n      }\n    }\n    \n    return embeddings;\n  }\n}\n\nclass OpenAIEmbeddingProvider implements EmbeddingProvider {\n  // private client: OpenAI;\n  \n  constructor() {\n    // TODO: Uncomment when OpenAI is available as fallback\n    /*\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      throw new Error('OPENAI_API_KEY environment variable is required');\n    }\n    this.client = new OpenAI({ apiKey });\n    */\n    throw new Error('OpenAI provider not implemented yet - use as fallback');\n  }\n  \n  async generateEmbedding(text: string): Promise<number[]> {\n    // TODO: Implement OpenAI embedding generation\n    /*\n    try {\n      const response = await this.client.embeddings.create({\n        model: \"text-embedding-3-small\",\n        input: text,\n      });\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error('Error generating OpenAI embedding:', error);\n      throw new Error('Failed to generate embedding with OpenAI');\n    }\n    */\n    throw new Error('OpenAI provider not implemented yet');\n  }\n  \n  async generateBatchEmbeddings(texts: string[]): Promise<number[][]> {\n    // TODO: Implement OpenAI batch embedding generation\n    throw new Error('OpenAI provider not implemented yet');\n  }\n}\n\n// Embedding service with fallback support\nclass EmbeddingService {\n  private providers: EmbeddingProvider[] = [];\n  \n  constructor() {\n    // Try to initialize providers in order of preference\n    try {\n      this.providers.push(new GeminiEmbeddingProvider());\n      console.log('‚úÖ Gemini embedding provider initialized');\n    } catch (error) {\n      console.warn('‚ùå Failed to initialize Gemini embedding provider:', error.message);\n    }\n    \n    try {\n      this.providers.push(new OpenAIEmbeddingProvider());\n      console.log('‚úÖ OpenAI embedding provider initialized');\n    } catch (error) {\n      console.warn('‚ùå Failed to initialize OpenAI embedding provider:', error.message);\n    }\n    \n    if (this.providers.length === 0) {\n      console.warn('No embedding providers available. Please configure GEMINI_API_KEY or OPENAI_API_KEY. Some features may be limited.');\n    }\n  }\n  \n  async generateEmbedding(text: string): Promise<number[]> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.generateEmbedding(text);\n      } catch (error) {\n        console.warn('Embedding provider failed, trying next:', error.message);\n        continue;\n      }\n    }\n    \n    throw new Error('All embedding providers failed');\n  }\n  \n  async generateBatchEmbeddings(texts: string[]): Promise<number[][]> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.generateBatchEmbeddings(texts);\n      } catch (error) {\n        console.warn('Batch embedding provider failed, trying next:', error.message);\n        continue;\n      }\n    }\n    \n    throw new Error('All embedding providers failed for batch processing');\n  }\n  \n  // Utility function to generate embeddings for career text\n  async generateCareerEmbedding(career: {\n    title: string;\n    description: string;\n    skills: Array<{ name: string; level: string; category: string }>;\n    industry: string;\n  }): Promise<number[]> {\n    // Combine career information into a comprehensive text for embedding\n    const skillsText = career.skills.map(s => `${s.name} (${s.level})`).join(', ');\n    const careerText = [\n      career.title,\n      career.description,\n      career.industry,\n      `Required skills: ${skillsText}`,\n    ].join('. ');\n    \n    return this.generateEmbedding(careerText);\n  }\n  \n  // Utility function to generate embeddings for user profile\n  async generateUserProfileEmbedding(profile: {\n    title?: string;\n    bio?: string;\n    skills: Array<{ name: string; level: string }>;\n    interests: string[];\n    experience?: string;\n  }): Promise<number[]> {\n    const skillsText = profile.skills.map(s => `${s.name} (${s.level})`).join(', ');\n    const interestsText = profile.interests.join(', ');\n    \n    const profileText = [\n      profile.title || '',\n      profile.bio || '',\n      `Experience level: ${profile.experience || 'Unknown'}`,\n      `Skills: ${skillsText}`,\n      `Interests: ${interestsText}`,\n    ].filter(Boolean).join('. ');\n    \n    return this.generateEmbedding(profileText);\n  }\n}\n\n// Export singleton instance\nexport const embeddingService = new EmbeddingService();\n\n// Utility function for cosine similarity calculation\nexport function cosineSimilarity(vecA: number[], vecB: number[]): number {\n  if (vecA.length !== vecB.length) {\n    throw new Error('Vectors must have the same length');\n  }\n  \n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n  \n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }\n  \n  normA = Math.sqrt(normA);\n  normB = Math.sqrt(normB);\n  \n  if (normA === 0 || normB === 0) {\n    return 0;\n  }\n  \n  return dotProduct / (normA * normB);\n}\n","size_bytes":6720},"server/services/firebaseAdmin.ts":{"content":"import * as admin from 'firebase-admin';\n\n// Initialize Firebase Admin SDK\nlet app: admin.app.App | null = null;\nlet isFirebaseInitialized = false;\n\ntry {\n  // Check if Firebase is already initialized\n  if (!admin.apps || admin.apps.length === 0) {\n    // Try to get service account from environment variable (JSON string)\n    const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n    \n    if (serviceAccount) {\n      const serviceAccountObj = JSON.parse(serviceAccount);\n      \n      app = admin.initializeApp({\n        credential: admin.credential.cert(serviceAccountObj),\n        projectId: serviceAccountObj.project_id,\n        storageBucket: `${serviceAccountObj.project_id}.appspot.com`,\n      });\n      isFirebaseInitialized = true;\n      console.log('Firebase Admin initialized successfully');\n    } else {\n      console.warn('Firebase Admin not initialized: FIREBASE_SERVICE_ACCOUNT_KEY environment variable not set. Some features may be limited.');\n    }\n  } else {\n    app = admin.apps[0] as admin.app.App;\n    isFirebaseInitialized = true;\n    console.log('Firebase Admin already initialized');\n  }\n} catch (error) {\n  console.error('Failed to initialize Firebase Admin:', error);\n  console.warn('Continuing without Firebase. Some features may be limited.');\n}\n\n// Export Firebase services only if initialized\nexport const auth = isFirebaseInitialized ? admin.auth() : null;\nexport const firestore = isFirebaseInitialized ? admin.firestore() : null;\nexport const storage = isFirebaseInitialized ? admin.storage() : null;\n\n// Export initialization status for other services to check\nexport { isFirebaseInitialized };\n\n// Verify Firebase ID token\nexport async function verifyIdToken(idToken: string): Promise<admin.auth.DecodedIdToken> {\n  try {\n    return await auth.verifyIdToken(idToken);\n  } catch (error) {\n    throw new Error('Invalid or expired token');\n  }\n}\n\n// Create custom token (if needed)\nexport async function createCustomToken(uid: string): Promise<string> {\n  return await auth.createCustomToken(uid);\n}\n\nexport default app;\n","size_bytes":2063},"server/services/firestoreService.ts":{"content":"import { firestore } from './firebaseAdmin';\nimport { \n  User, InsertUser, \n  UserProfile, InsertUserProfile,\n  Career, InsertCareer,\n  CareerMatch, InsertCareerMatch,\n  Roadmap, InsertRoadmap,\n  UserProgress, InsertUserProgress,\n  LearningResource\n} from '@shared/schema';\n\nexport class FirestoreService {\n  // User operations\n  async createUser(data: InsertUser): Promise<User> {\n    const docRef = firestore.collection('users').doc();\n    const user: User = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    await docRef.set(user);\n    return user;\n  }\n  \n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | null> {\n    const snapshot = await firestore.collection('users')\n      .where('firebaseUid', '==', firebaseUid)\n      .limit(1)\n      .get();\n    \n    if (snapshot.empty) return null;\n    return snapshot.docs[0].data() as User;\n  }\n  \n  async getUserById(id: string): Promise<User | null> {\n    const doc = await firestore.collection('users').doc(id).get();\n    return doc.exists ? doc.data() as User : null;\n  }\n  \n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    const updates = { ...data, updatedAt: new Date() };\n    await firestore.collection('users').doc(id).update(updates);\n    \n    const updated = await this.getUserById(id);\n    if (!updated) throw new Error('User not found after update');\n    return updated;\n  }\n  \n  // User Profile operations\n  async createUserProfile(data: InsertUserProfile): Promise<UserProfile> {\n    const docRef = firestore.collection('userProfiles').doc();\n    const profile: UserProfile = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    await docRef.set(profile);\n    return profile;\n  }\n  \n  async getUserProfile(userId: string): Promise<UserProfile | null> {\n    const snapshot = await firestore.collection('userProfiles')\n      .where('userId', '==', userId)\n      .limit(1)\n      .get();\n    \n    if (snapshot.empty) return null;\n    return snapshot.docs[0].data() as UserProfile;\n  }\n  \n  async updateUserProfile(userId: string, data: Partial<UserProfile>): Promise<UserProfile> {\n    const snapshot = await firestore.collection('userProfiles')\n      .where('userId', '==', userId)\n      .limit(1)\n      .get();\n    \n    if (snapshot.empty) throw new Error('Profile not found');\n    \n    const docId = snapshot.docs[0].id;\n    const updates = { ...data, updatedAt: new Date() };\n    await firestore.collection('userProfiles').doc(docId).update(updates);\n    \n    const updated = await this.getUserProfile(userId);\n    if (!updated) throw new Error('Profile not found after update');\n    return updated;\n  }\n  \n  // Career operations\n  async createCareer(data: InsertCareer): Promise<Career> {\n    const docRef = firestore.collection('careers').doc();\n    const career: Career = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    await docRef.set(career);\n    return career;\n  }\n  \n  async getCareers(limit: number = 50): Promise<Career[]> {\n    const snapshot = await firestore.collection('careers')\n      .where('isActive', '==', true)\n      .limit(limit)\n      .get();\n    \n    return snapshot.docs.map(doc => doc.data() as Career);\n  }\n  \n  async getCareerById(id: string): Promise<Career | null> {\n    const doc = await firestore.collection('careers').doc(id).get();\n    return doc.exists ? doc.data() as Career : null;\n  }\n  \n  // Career Match operations\n  async createCareerMatch(data: InsertCareerMatch): Promise<CareerMatch> {\n    const docRef = firestore.collection('careerMatches').doc();\n    const match: CareerMatch = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n    };\n    \n    await docRef.set(match);\n    return match;\n  }\n  \n  async getUserCareerMatches(userId: string, limit: number = 10): Promise<CareerMatch[]> {\n    const snapshot = await firestore.collection('careerMatches')\n      .where('userId', '==', userId)\n      .orderBy('compatibilityScore', 'desc')\n      .limit(limit)\n      .get();\n    \n    return snapshot.docs.map(doc => doc.data() as CareerMatch);\n  }\n  \n  async deleteUserCareerMatches(userId: string): Promise<void> {\n    const snapshot = await firestore.collection('careerMatches')\n      .where('userId', '==', userId)\n      .get();\n    \n    const batch = firestore.batch();\n    snapshot.docs.forEach(doc => {\n      batch.delete(doc.ref);\n    });\n    \n    await batch.commit();\n  }\n  \n  // Roadmap operations\n  async createRoadmap(data: InsertRoadmap): Promise<Roadmap> {\n    const docRef = firestore.collection('roadmaps').doc();\n    const roadmap: Roadmap = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    await docRef.set(roadmap);\n    return roadmap;\n  }\n  \n  async getUserRoadmaps(userId: string): Promise<Roadmap[]> {\n    const snapshot = await firestore.collection('roadmaps')\n      .where('userId', '==', userId)\n      .where('isActive', '==', true)\n      .orderBy('createdAt', 'desc')\n      .get();\n    \n    return snapshot.docs.map(doc => doc.data() as Roadmap);\n  }\n  \n  async getRoadmapById(id: string): Promise<Roadmap | null> {\n    const doc = await firestore.collection('roadmaps').doc(id).get();\n    return doc.exists ? doc.data() as Roadmap : null;\n  }\n  \n  async updateRoadmap(id: string, data: Partial<Roadmap>): Promise<Roadmap> {\n    const updates = { ...data, updatedAt: new Date() };\n    await firestore.collection('roadmaps').doc(id).update(updates);\n    \n    const updated = await this.getRoadmapById(id);\n    if (!updated) throw new Error('Roadmap not found after update');\n    return updated;\n  }\n  \n  // User Progress operations\n  async createUserProgress(data: InsertUserProgress): Promise<UserProgress> {\n    const docRef = firestore.collection('userProgress').doc();\n    const progress: UserProgress = {\n      id: docRef.id,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    await docRef.set(progress);\n    return progress;\n  }\n  \n  async getUserProgress(userId: string, roadmapId: string): Promise<UserProgress[]> {\n    const snapshot = await firestore.collection('userProgress')\n      .where('userId', '==', userId)\n      .where('roadmapId', '==', roadmapId)\n      .get();\n    \n    return snapshot.docs.map(doc => doc.data() as UserProgress);\n  }\n  \n  async updateUserProgress(id: string, data: Partial<UserProgress>): Promise<UserProgress> {\n    const updates = { ...data, updatedAt: new Date() };\n    await firestore.collection('userProgress').doc(id).update(updates);\n    \n    const doc = await firestore.collection('userProgress').doc(id).get();\n    if (!doc.exists) throw new Error('User progress not found after update');\n    return doc.data() as UserProgress;\n  }\n  \n  // Learning Resources operations\n  async getLearningResources(skills: string[] = [], limit: number = 20): Promise<LearningResource[]> {\n    let query = firestore.collection('learningResources')\n      .where('isRecommended', '==', true);\n    \n    if (skills.length > 0) {\n      query = query.where('skills', 'array-contains-any', skills);\n    }\n    \n    const snapshot = await query.limit(limit).get();\n    return snapshot.docs.map(doc => doc.data() as LearningResource);\n  }\n  \n  async createLearningResource(data: Partial<LearningResource>): Promise<LearningResource> {\n    const docRef = firestore.collection('learningResources').doc();\n    const resource: LearningResource = {\n      id: docRef.id,\n      title: data.title || '',\n      type: data.type || 'course',\n      url: data.url || '',\n      provider: data.provider || '',\n      ...data,\n      createdAt: new Date(),\n    };\n    \n    await docRef.set(resource);\n    return resource;\n  }\n  \n  // Batch operations\n  async batchCreateCareers(careers: InsertCareer[]): Promise<Career[]> {\n    const batch = firestore.batch();\n    const results: Career[] = [];\n    \n    careers.forEach(careerData => {\n      const docRef = firestore.collection('careers').doc();\n      const career: Career = {\n        id: docRef.id,\n        ...careerData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      batch.set(docRef, career);\n      results.push(career);\n    });\n    \n    await batch.commit();\n    return results;\n  }\n  \n  async batchCreateLearningResources(resources: Partial<LearningResource>[]): Promise<LearningResource[]> {\n    const batch = firestore.batch();\n    const results: LearningResource[] = [];\n    \n    resources.forEach(resourceData => {\n      const docRef = firestore.collection('learningResources').doc();\n      const resource: LearningResource = {\n        id: docRef.id,\n        title: resourceData.title || '',\n        type: resourceData.type || 'course',\n        url: resourceData.url || '',\n        provider: resourceData.provider || '',\n        ...resourceData,\n        createdAt: new Date(),\n      };\n      \n      batch.set(docRef, resource);\n      results.push(resource);\n    });\n    \n    await batch.commit();\n    return results;\n  }\n  \n  // Analytics and stats\n  async getUserStats(userId: string): Promise<{\n    careerMatches: number;\n    roadmapProgress: number;\n    skillsAcquired: number;\n  }> {\n    const [matchesSnapshot, roadmapsSnapshot, progressSnapshot] = await Promise.all([\n      firestore.collection('careerMatches').where('userId', '==', userId).get(),\n      firestore.collection('roadmaps').where('userId', '==', userId).where('isActive', '==', true).get(),\n      firestore.collection('userProgress').where('userId', '==', userId).where('status', '==', 'completed').get(),\n    ]);\n    \n    let totalProgress = 0;\n    if (!roadmapsSnapshot.empty) {\n      const roadmaps = roadmapsSnapshot.docs.map(doc => doc.data() as Roadmap);\n      const completedMilestones = progressSnapshot.size;\n      const totalMilestones = roadmaps.reduce((sum, roadmap) => sum + (roadmap.milestones?.length || 0), 0);\n      totalProgress = totalMilestones > 0 ? Math.round((completedMilestones / totalMilestones) * 100) : 0;\n    }\n    \n    return {\n      careerMatches: matchesSnapshot.size,\n      roadmapProgress: totalProgress,\n      skillsAcquired: progressSnapshot.size,\n    };\n  }\n  \n  async getUserActivity(userId: string, limit: number = 10): Promise<any[]> {\n    // This is a simplified version - in production, you'd have a dedicated activity log collection\n    const [progressSnapshot, roadmapSnapshot] = await Promise.all([\n      firestore.collection('userProgress')\n        .where('userId', '==', userId)\n        .orderBy('updatedAt', 'desc')\n        .limit(limit)\n        .get(),\n      firestore.collection('roadmaps')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .limit(5)\n        .get(),\n    ]);\n    \n    const activities: any[] = [];\n    \n    progressSnapshot.docs.forEach(doc => {\n      const progress = doc.data() as UserProgress;\n      if (progress.status === 'completed') {\n        activities.push({\n          id: doc.id,\n          type: 'completion',\n          title: `Completed milestone: ${progress.milestoneId}`,\n          timestamp: progress.updatedAt?.toISOString() || new Date().toISOString(),\n        });\n      }\n    });\n    \n    roadmapSnapshot.docs.forEach(doc => {\n      const roadmap = doc.data() as Roadmap;\n      activities.push({\n        id: doc.id,\n        type: 'roadmap_start',\n        title: `Started roadmap: ${roadmap.title}`,\n        timestamp: roadmap.createdAt?.toISOString() || new Date().toISOString(),\n      });\n    });\n    \n    return activities\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const firestoreService = new FirestoreService();\n","size_bytes":11755},"server/services/matchingEngine.ts":{"content":"import { embeddingService, cosineSimilarity } from './embeddings';\nimport { firestoreService } from './firestoreService';\nimport { Career, UserProfile, CareerMatch } from '@shared/schema';\n\ninterface MatchingResult {\n  career: Career;\n  compatibilityScore: number;\n  matchReasons: string[];\n  skillGaps: Array<{\n    skill: string;\n    currentLevel: string;\n    requiredLevel: string;\n  }>;\n}\n\nexport class MatchingEngine {\n  async generateCareerMatches(userId: string, userProfile: UserProfile, limit: number = 10): Promise<MatchingResult[]> {\n    try {\n      // Get all active careers\n      const careers = await firestoreService.getCareers(100);\n      if (careers.length === 0) {\n        throw new Error('No careers available for matching');\n      }\n      \n      // Generate user profile embedding\n      const userEmbedding = await embeddingService.generateUserProfileEmbedding({\n        title: userProfile.title || '',\n        bio: userProfile.bio || '',\n        skills: userProfile.skills || [],\n        interests: userProfile.interests || [],\n        experience: userProfile.experience || '',\n      });\n      \n      // Calculate matches for each career\n      const matches: MatchingResult[] = [];\n      \n      for (const career of careers) {\n        try {\n          // Generate or use existing career embedding\n          let careerEmbedding = career.embedding;\n          if (!careerEmbedding || careerEmbedding.length === 0) {\n            careerEmbedding = await embeddingService.generateCareerEmbedding({\n              title: career.title,\n              description: career.description,\n              skills: career.skills || [],\n              industry: career.industry || '',\n            });\n            \n            // Update career with embedding (optional - for performance)\n            // await firestoreService.updateCareer(career.id, { embedding: careerEmbedding });\n          }\n          \n          // Calculate similarity score\n          const similarityScore = cosineSimilarity(userEmbedding, careerEmbedding);\n          \n          // Calculate additional matching factors\n          const skillMatch = this.calculateSkillMatch(userProfile.skills || [], career.skills || []);\n          const interestMatch = this.calculateInterestMatch(userProfile.interests || [], career);\n          const experienceMatch = this.calculateExperienceMatch(userProfile.experience || '', career);\n          \n          // Combine scores (weighted)\n          const compatibilityScore = Math.min(100, Math.round(\n            (similarityScore * 0.4 + skillMatch * 0.35 + interestMatch * 0.15 + experienceMatch * 0.1) * 100\n          ));\n          \n          if (compatibilityScore > 30) { // Only include matches above 30%\n            const { matchReasons, skillGaps } = this.generateMatchExplanation(\n              userProfile,\n              career,\n              compatibilityScore,\n              skillMatch,\n              interestMatch\n            );\n            \n            matches.push({\n              career,\n              compatibilityScore,\n              matchReasons,\n              skillGaps,\n            });\n          }\n        } catch (error) {\n          console.warn(`Error processing career ${career.title}:`, error);\n          continue;\n        }\n      }\n      \n      // Sort by compatibility score and return top matches\n      const sortedMatches = matches\n        .sort((a, b) => b.compatibilityScore - a.compatibilityScore)\n        .slice(0, limit);\n      \n      // Save matches to Firestore\n      await this.saveCareerMatches(userId, sortedMatches);\n      \n      return sortedMatches;\n    } catch (error) {\n      console.error('Error generating career matches:', error);\n      throw new Error('Failed to generate career matches');\n    }\n  }\n  \n  private calculateSkillMatch(userSkills: any[], careerSkills: any[]): number {\n    if (userSkills.length === 0 || careerSkills.length === 0) return 0;\n    \n    const userSkillNames = userSkills.map(s => s.name.toLowerCase());\n    const careerSkillNames = careerSkills.map(s => s.name.toLowerCase());\n    \n    let totalMatch = 0;\n    let totalRequiredSkills = careerSkills.length;\n    \n    careerSkills.forEach(careerSkill => {\n      const userSkill = userSkills.find(us => \n        us.name.toLowerCase() === careerSkill.name.toLowerCase()\n      );\n      \n      if (userSkill) {\n        // Calculate level match\n        const levelScore = this.calculateLevelMatch(userSkill.level, careerSkill.level);\n        totalMatch += levelScore;\n      }\n    });\n    \n    return totalRequiredSkills > 0 ? totalMatch / totalRequiredSkills : 0;\n  }\n  \n  private calculateLevelMatch(userLevel: string, requiredLevel: string): number {\n    const levels = { 'beginner': 1, 'intermediate': 2, 'advanced': 3, 'expert': 4 };\n    const userLevelNum = levels[userLevel as keyof typeof levels] || 0;\n    const requiredLevelNum = levels[requiredLevel as keyof typeof levels] || 1;\n    \n    if (userLevelNum >= requiredLevelNum) return 1; // Perfect match\n    if (userLevelNum === requiredLevelNum - 1) return 0.7; // Close match\n    if (userLevelNum === requiredLevelNum - 2) return 0.4; // Partial match\n    return 0.1; // Minimal match\n  }\n  \n  private calculateInterestMatch(userInterests: string[], career: Career): number {\n    if (userInterests.length === 0) return 0.5; // Neutral\n    \n    const careerText = `${career.title} ${career.description} ${career.industry}`.toLowerCase();\n    let matchCount = 0;\n    \n    userInterests.forEach(interest => {\n      if (careerText.includes(interest.toLowerCase())) {\n        matchCount++;\n      }\n    });\n    \n    return userInterests.length > 0 ? matchCount / userInterests.length : 0;\n  }\n  \n  private calculateExperienceMatch(userExperience: string, career: Career): number {\n    // Simple experience matching - can be enhanced\n    const experienceMapping = {\n      'fresher': 0,\n      '0-2': 1,\n      '2-5': 3,\n      '5-10': 7,\n      '10+': 10\n    };\n    \n    const userExpNum = experienceMapping[userExperience as keyof typeof experienceMapping] || 0;\n    \n    // Most careers can accommodate various experience levels\n    // Give higher scores for entry-level positions for freshers\n    if (userExperience === 'fresher') {\n      return career.title.toLowerCase().includes('junior') || \n             career.title.toLowerCase().includes('trainee') ? 1 : 0.7;\n    }\n    \n    return 0.8; // Generally good match for experienced professionals\n  }\n  \n  private generateMatchExplanation(\n    userProfile: UserProfile,\n    career: Career,\n    compatibilityScore: number,\n    skillMatch: number,\n    interestMatch: number\n  ): { matchReasons: string[]; skillGaps: any[] } {\n    const matchReasons: string[] = [];\n    const skillGaps: any[] = [];\n    \n    // Generate match reasons\n    if (skillMatch > 0.7) {\n      matchReasons.push('Strong skill alignment with your technical background');\n    } else if (skillMatch > 0.4) {\n      matchReasons.push('Good foundation with some skill development needed');\n    }\n    \n    if (interestMatch > 0.5) {\n      matchReasons.push('Aligns well with your stated interests');\n    }\n    \n    if (compatibilityScore > 80) {\n      matchReasons.push('Excellent overall fit based on your profile');\n    } else if (compatibilityScore > 60) {\n      matchReasons.push('Good career transition opportunity');\n    }\n    \n    // Calculate skill gaps\n    const userSkills = userProfile.skills || [];\n    const careerSkills = career.skills || [];\n    \n    careerSkills.forEach(careerSkill => {\n      const userSkill = userSkills.find(us => \n        us.name.toLowerCase() === careerSkill.name.toLowerCase()\n      );\n      \n      if (!userSkill) {\n        skillGaps.push({\n          skill: careerSkill.name,\n          currentLevel: 'none',\n          requiredLevel: careerSkill.level,\n        });\n      } else {\n        const levels = { 'beginner': 1, 'intermediate': 2, 'advanced': 3, 'expert': 4 };\n        const userLevelNum = levels[userSkill.level as keyof typeof levels] || 0;\n        const requiredLevelNum = levels[careerSkill.level as keyof typeof levels] || 1;\n        \n        if (userLevelNum < requiredLevelNum) {\n          skillGaps.push({\n            skill: careerSkill.name,\n            currentLevel: userSkill.level,\n            requiredLevel: careerSkill.level,\n          });\n        }\n      }\n    });\n    \n    return { matchReasons, skillGaps };\n  }\n  \n  private async saveCareerMatches(userId: string, matches: MatchingResult[]): Promise<void> {\n    try {\n      // Delete existing matches for the user\n      await firestoreService.deleteUserCareerMatches(userId);\n      \n      // Save new matches\n      for (const match of matches) {\n        await firestoreService.createCareerMatch({\n          userId,\n          careerId: match.career.id,\n          compatibilityScore: match.compatibilityScore,\n          matchReasons: match.matchReasons,\n          skillGaps: match.skillGaps,\n        });\n      }\n    } catch (error) {\n      console.error('Error saving career matches:', error);\n      // Don't throw here - matches can still be returned even if saving fails\n    }\n  }\n  \n  async getEnhancedCareerMatches(userId: string): Promise<any[]> {\n    const matches = await firestoreService.getUserCareerMatches(userId);\n    const enhancedMatches = [];\n    \n    for (const match of matches) {\n      const career = await firestoreService.getCareerById(match.careerId);\n      if (career) {\n        enhancedMatches.push({\n          id: match.id,\n          title: career.title,\n          description: career.description,\n          compatibilityScore: match.compatibilityScore,\n          matchReasons: match.matchReasons,\n          skillGaps: match.skillGaps,\n          salaryRange: career.salaryRange,\n          skills: career.skills?.slice(0, 5) || [], // Top 5 skills\n          industry: career.industry,\n          locations: career.locations,\n          growthPath: career.growthPath,\n          requirements: career.requirements,\n        });\n      }\n    }\n    \n    return enhancedMatches;\n  }\n}\n\nexport const matchingEngine = new MatchingEngine();\n","size_bytes":10054},"server/services/resumeParser.ts":{"content":"// Dynamic import to avoid initialization issues with pdf-parse\nconst pdfParse = async () => {\n  const module = await import('pdf-parse');\n  return module.default || module;\n};\nimport { storage } from './firebaseAdmin';\n\ninterface ParsedResumeData {\n  text: string;\n  skills: string[];\n  education: Array<{\n    degree: string;\n    field: string;\n    institution: string;\n    year?: number;\n  }>;\n  experience: Array<{\n    title: string;\n    company: string;\n    duration: string;\n    description: string;\n  }>;\n  extractedInfo: {\n    email?: string;\n    phone?: string;\n    name?: string;\n  };\n}\n\n// Common technical skills for Indian job market\nconst SKILL_KEYWORDS = [\n  // Programming Languages\n  'javascript', 'python', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust', 'kotlin', 'swift',\n  // Web Technologies\n  'react', 'angular', 'vue', 'node.js', 'express', 'django', 'flask', 'spring', 'laravel',\n  // Databases\n  'mysql', 'postgresql', 'mongodb', 'redis', 'elasticsearch', 'sqlite', 'oracle',\n  // Cloud & DevOps\n  'aws', 'azure', 'gcp', 'docker', 'kubernetes', 'jenkins', 'git', 'linux',\n  // Data Science & AI\n  'pandas', 'numpy', 'tensorflow', 'pytorch', 'scikit-learn', 'matplotlib', 'tableau', 'power bi',\n  // Mobile Development\n  'android', 'ios', 'react native', 'flutter', 'xamarin',\n  // Other Technical Skills\n  'html', 'css', 'sass', 'webpack', 'rest api', 'graphql', 'microservices', 'agile', 'scrum'\n];\n\nexport class ResumeParser {\n  async parseFromUrl(resumeUrl: string): Promise<ParsedResumeData> {\n    try {\n      // Download file from Firebase Storage\n      const bucket = storage.bucket();\n      const file = bucket.file(this.extractFilePathFromUrl(resumeUrl));\n      const [buffer] = await file.download();\n      \n      return await this.parseBuffer(buffer);\n    } catch (error) {\n      console.error('Error parsing resume from URL:', error);\n      throw new Error('Failed to parse resume');\n    }\n  }\n  \n  async parseBuffer(buffer: Buffer): Promise<ParsedResumeData> {\n    try {\n      const parse = await pdfParse();\n      const data = await parse(buffer);\n      const text = data.text;\n      \n      return {\n        text,\n        skills: this.extractSkills(text),\n        education: this.extractEducation(text),\n        experience: this.extractExperience(text),\n        extractedInfo: this.extractPersonalInfo(text),\n      };\n    } catch (error) {\n      console.error('Error parsing PDF:', error);\n      throw new Error('Failed to parse PDF content');\n    }\n  }\n  \n  private extractSkills(text: string): string[] {\n    const skills: Set<string> = new Set();\n    const lowerText = text.toLowerCase();\n    \n    // Look for skills section\n    const skillsSection = this.extractSection(text, ['skills', 'technical skills', 'technologies']);\n    const searchText = skillsSection || text;\n    \n    SKILL_KEYWORDS.forEach(skill => {\n      if (searchText.toLowerCase().includes(skill.toLowerCase())) {\n        skills.add(skill);\n      }\n    });\n    \n    // Look for common patterns like \"proficient in\", \"experience with\"\n    const skillPatterns = [\n      /(?:proficient in|experienced in|skilled in|knowledge of)\\s+([^.]+)/gi,\n      /(?:languages|technologies|tools):\\s*([^.]+)/gi,\n    ];\n    \n    skillPatterns.forEach(pattern => {\n      const matches = searchText.match(pattern);\n      if (matches) {\n        matches.forEach(match => {\n          SKILL_KEYWORDS.forEach(skill => {\n            if (match.toLowerCase().includes(skill.toLowerCase())) {\n              skills.add(skill);\n            }\n          });\n        });\n      }\n    });\n    \n    return Array.from(skills);\n  }\n  \n  private extractEducation(text: string): ParsedResumeData['education'] {\n    const education: ParsedResumeData['education'] = [];\n    const educationSection = this.extractSection(text, ['education', 'academic', 'qualification']);\n    const searchText = educationSection || text;\n    \n    // Common degree patterns\n    const degreePatterns = [\n      /(?:bachelor|b\\.tech|b\\.e|btech|be|b\\.sc|bsc|b\\.com|bcom|b\\.a|ba|bachelor's)\\s*(?:of|in)?\\s*([^,\\n]+)/gi,\n      /(?:master|m\\.tech|m\\.e|mtech|me|m\\.sc|msc|m\\.com|mcom|m\\.a|ma|mba|master's)\\s*(?:of|in)?\\s*([^,\\n]+)/gi,\n      /(?:phd|ph\\.d|doctorate)\\s*(?:in)?\\s*([^,\\n]+)/gi,\n    ];\n    \n    degreePatterns.forEach(pattern => {\n      const matches = searchText.matchAll(pattern);\n      for (const match of matches) {\n        const fullMatch = match[0];\n        const field = match[1]?.trim() || 'Unknown';\n        \n        // Extract year (look for 4-digit years)\n        const yearMatch = fullMatch.match(/\\b(19|20)\\d{2}\\b/);\n        const year = yearMatch ? parseInt(yearMatch[0]) : undefined;\n        \n        // Try to extract institution (look for common patterns)\n        const institutionPattern = /(?:from|at)\\s+([^,\\n]+)/i;\n        const institutionMatch = fullMatch.match(institutionPattern);\n        const institution = institutionMatch?.[1]?.trim() || 'Not specified';\n        \n        education.push({\n          degree: fullMatch.split(/in|of/i)[0]?.trim() || 'Unknown',\n          field: field,\n          institution: institution,\n          year: year,\n        });\n      }\n    });\n    \n    return education;\n  }\n  \n  private extractExperience(text: string): ParsedResumeData['experience'] {\n    const experience: ParsedResumeData['experience'] = [];\n    const experienceSection = this.extractSection(text, ['experience', 'work experience', 'employment', 'professional experience']);\n    const searchText = experienceSection || text;\n    \n    // Common job title patterns\n    const jobPatterns = [\n      /(?:software|senior|junior|lead|principal)?\\s*(?:developer|engineer|analyst|manager|consultant|architect)/gi,\n    ];\n    \n    jobPatterns.forEach(pattern => {\n      const matches = searchText.matchAll(pattern);\n      for (const match of matches) {\n        // This is a simplified extraction - in a real implementation,\n        // you'd want more sophisticated parsing to extract company names,\n        // duration, and descriptions\n        experience.push({\n          title: match[0].trim(),\n          company: 'Not specified', // Would need more advanced parsing\n          duration: 'Not specified', // Would need more advanced parsing\n          description: 'Not specified', // Would need more advanced parsing\n        });\n      }\n    });\n    \n    return experience;\n  }\n  \n  private extractPersonalInfo(text: string): ParsedResumeData['extractedInfo'] {\n    const info: ParsedResumeData['extractedInfo'] = {};\n    \n    // Extract email\n    const emailPattern = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/;\n    const emailMatch = text.match(emailPattern);\n    if (emailMatch) {\n      info.email = emailMatch[0];\n    }\n    \n    // Extract phone (Indian format)\n    const phonePattern = /(?:\\+91|91)?[\\s-]?[6-9]\\d{9}/;\n    const phoneMatch = text.match(phonePattern);\n    if (phoneMatch) {\n      info.phone = phoneMatch[0];\n    }\n    \n    // Extract name (first few lines, common patterns)\n    const lines = text.split('\\n').filter(line => line.trim().length > 0);\n    for (let i = 0; i < Math.min(5, lines.length); i++) {\n      const line = lines[i].trim();\n      // Look for lines that could be names (2-3 words, no special chars)\n      if (/^[A-Za-z\\s]{2,50}$/.test(line) && line.split(' ').length >= 2 && line.split(' ').length <= 4) {\n        info.name = line;\n        break;\n      }\n    }\n    \n    return info;\n  }\n  \n  private extractSection(text: string, sectionHeaders: string[]): string | null {\n    const lines = text.split('\\n');\n    let startIndex = -1;\n    let endIndex = -1;\n    \n    // Find start of section\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].toLowerCase().trim();\n      if (sectionHeaders.some(header => line.includes(header.toLowerCase()))) {\n        startIndex = i + 1;\n        break;\n      }\n    }\n    \n    if (startIndex === -1) return null;\n    \n    // Find end of section (next section header or end of document)\n    const commonSections = ['experience', 'education', 'skills', 'projects', 'certifications', 'awards'];\n    for (let i = startIndex; i < lines.length; i++) {\n      const line = lines[i].toLowerCase().trim();\n      if (commonSections.some(section => line.includes(section) && !sectionHeaders.some(header => line.includes(header.toLowerCase())))) {\n        endIndex = i;\n        break;\n      }\n    }\n    \n    if (endIndex === -1) endIndex = lines.length;\n    \n    return lines.slice(startIndex, endIndex).join('\\n');\n  }\n  \n  private extractFilePathFromUrl(url: string): string {\n    // Extract file path from Firebase Storage URL\n    const match = url.match(/\\/o\\/(.+?)\\?/);\n    if (match) {\n      return decodeURIComponent(match[1]);\n    }\n    throw new Error('Invalid Firebase Storage URL');\n  }\n}\n\nexport const resumeParser = new ResumeParser();\n","size_bytes":8807},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth.tsx":{"content":"import { LoginForm } from '@/components/auth/LoginForm';\n\nexport default function Auth() {\n  return <LoginForm />;\n}\n","size_bytes":117},"client/src/pages/dashboard.tsx":{"content":"import { Dashboard } from '@/components/dashboard/Dashboard';\nimport { useAuth } from '@/components/auth/AuthProvider';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\nexport default function DashboardPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/auth');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary text-lg\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-graduation-cap text-primary-foreground text-sm\"></i>\n                </div>\n                <span className=\"text-xl font-semibold\">AI Career Advisor</span>\n              </div>\n            </div>\n            \n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#dashboard\" className=\"text-foreground font-medium\">Dashboard</a>\n              <a href=\"#careers\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Career Match</a>\n              <a href=\"#roadmap\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Roadmap</a>\n              <a href=\"#profile\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Profile</a>\n            </nav>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <button className=\"flex items-center space-x-2 p-2 rounded-lg hover:bg-secondary transition-colors\">\n                  <img \n                    src={user.photoURL || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150&q=80\"} \n                    alt=\"Profile\" \n                    className=\"w-8 h-8 rounded-full object-cover\"\n                  />\n                  <span className=\"text-sm font-medium hidden sm:inline\">\n                    {user.displayName?.split(' ')[0] || 'User'}\n                  </span>\n                  <i className=\"fas fa-chevron-down text-xs text-muted-foreground\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <Dashboard />\n    </>\n  );\n}\n","size_bytes":3132},"client/src/pages/landing.tsx":{"content":"import { Button } from '@/components/ui/button';\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Navigation */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-graduation-cap text-primary-foreground text-sm\"></i>\n                </div>\n                <span className=\"text-xl font-semibold\">AI Career Advisor</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" data-testid=\"button-signin\">\n                Sign In\n              </Button>\n              <Button data-testid=\"button-get-started\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary to-chart-2 text-primary-foreground py-20 lg:py-32\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight mb-6\">\n                Discover Your Perfect Career Path with AI\n              </h1>\n              <p className=\"text-xl text-primary-foreground/90 mb-8 max-w-2xl\">\n                Get personalized career recommendations, skill-based matching, and structured roadmaps tailored for the Indian job market.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-card text-foreground hover:bg-secondary\"\n                  data-testid=\"button-start-assessment\"\n                >\n                  Start Free Assessment\n                </Button>\n                <Button \n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"border-primary-foreground/30 text-primary-foreground hover:bg-primary-foreground/10\"\n                  data-testid=\"button-view-sample\"\n                >\n                  View Sample Roadmap\n                </Button>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600&q=80\" \n                alt=\"Diverse professionals collaborating\" \n                className=\"rounded-2xl shadow-2xl\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold mb-4\">Why Choose AI Career Advisor?</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Our AI-powered platform provides comprehensive career guidance tailored for the Indian market\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-brain text-primary text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">AI-Powered Matching</h3>\n              <p className=\"text-muted-foreground\">\n                Our advanced AI analyzes your skills, interests, and experience to find the perfect career matches\n              </p>\n            </div>\n\n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-chart-2/10 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-route text-chart-2 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Personalized Roadmaps</h3>\n              <p className=\"text-muted-foreground\">\n                Get step-by-step learning paths with resources, milestones, and progress tracking\n              </p>\n            </div>\n\n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-map-marker-alt text-accent text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">India-Focused</h3>\n              <p className=\"text-muted-foreground\">\n                Tailored for the Indian job market with local insights, salary data, and opportunities\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-graduation-cap text-primary-foreground text-sm\"></i>\n                </div>\n                <span className=\"text-lg font-semibold\">AI Career Advisor</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Empowering Indian professionals with AI-driven career guidance and personalized learning paths.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Features</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Career Matching</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Skill Assessment</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Learning Roadmaps</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Resume Analysis</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Career Guide</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Industry Insights</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Success Stories</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Help Center</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">About Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border mt-8 pt-8 text-center text-sm text-muted-foreground\">\n            <p>&copy; 2024 AI Career Advisor India. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8145},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { OnboardingWizard } from '@/components/onboarding/OnboardingWizard';\nimport { useLocation } from 'wouter';\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n\n  const handleComplete = () => {\n    setLocation('/dashboard');\n  };\n\n  return <OnboardingWizard onComplete={handleComplete} />;\n}\n","size_bytes":328},"client/src/services/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { \n  getAuth, \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithRedirect,\n  getRedirectResult,\n  GoogleAuthProvider,\n  signOut,\n  onAuthStateChanged,\n  User\n} from \"firebase/auth\";\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const storage = getStorage(app);\nexport const firestore = getFirestore(app);\n\n// Auth providers\nconst googleProvider = new GoogleAuthProvider();\n\n// Auth functions\nexport const signInWithEmail = async (email: string, password: string) => {\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signUpWithEmail = async (email: string, password: string) => {\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInWithGoogle = async () => {\n  return await signInWithRedirect(auth, googleProvider);\n};\n\nexport const handleGoogleRedirect = async () => {\n  try {\n    const result = await getRedirectResult(auth);\n    if (result) {\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      return { user: result.user, credential };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error handling Google redirect:\", error);\n    throw error;\n  }\n};\n\nexport const logOut = async () => {\n  return await signOut(auth);\n};\n\nexport const onAuthChange = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// Storage functions\nexport const uploadResumeFile = async (file: File, userId: string): Promise<string> => {\n  const storageRef = ref(storage, `resumes/${userId}/${file.name}`);\n  const snapshot = await uploadBytes(storageRef, file);\n  const downloadURL = await getDownloadURL(snapshot.ref);\n  return downloadURL;\n};\n\n// Get auth token for API calls\nexport const getAuthToken = async (): Promise<string | null> => {\n  const user = auth.currentUser;\n  if (user) {\n    return await user.getIdToken();\n  }\n  return null;\n};\n","size_bytes":2500},"client/src/services/offline.ts":{"content":"// IndexedDB offline caching service\ninterface CacheItem {\n  key: string;\n  data: any;\n  timestamp: number;\n  expiry?: number;\n}\n\nclass OfflineCache {\n  private dbName = 'AICareerAdvisorCache';\n  private dbVersion = 1;\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains('cache')) {\n          db.createObjectStore('cache', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  async set(key: string, data: any, expiryMinutes?: number): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['cache'], 'readwrite');\n    const store = transaction.objectStore('cache');\n    \n    const cacheItem: CacheItem = {\n      key,\n      data,\n      timestamp: Date.now(),\n      expiry: expiryMinutes ? Date.now() + (expiryMinutes * 60 * 1000) : undefined\n    };\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(cacheItem);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async get(key: string): Promise<any | null> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['cache'], 'readonly');\n    const store = transaction.objectStore('cache');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => {\n        const result = request.result as CacheItem;\n        if (!result) {\n          resolve(null);\n          return;\n        }\n        \n        // Check if expired\n        if (result.expiry && Date.now() > result.expiry) {\n          this.delete(key);\n          resolve(null);\n          return;\n        }\n        \n        resolve(result.data);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async delete(key: string): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['cache'], 'readwrite');\n    const store = transaction.objectStore('cache');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.delete(key);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clear(): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['cache'], 'readwrite');\n    const store = transaction.objectStore('cache');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.clear();\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\nexport const offlineCache = new OfflineCache();\n\n// Sync service for online/offline data synchronization\nexport class SyncService {\n  private syncQueue: Array<{\n    url: string;\n    method: string;\n    data?: any;\n    timestamp: number;\n  }> = [];\n\n  async queueSync(url: string, method: string, data?: any) {\n    this.syncQueue.push({\n      url,\n      method,\n      data,\n      timestamp: Date.now()\n    });\n    \n    // Store queue in cache\n    await offlineCache.set('syncQueue', this.syncQueue);\n    \n    // Try to sync if online\n    if (navigator.onLine) {\n      await this.processSyncQueue();\n    }\n  }\n\n  async processSyncQueue() {\n    if (this.syncQueue.length === 0) {\n      const cachedQueue = await offlineCache.get('syncQueue');\n      if (cachedQueue) {\n        this.syncQueue = cachedQueue;\n      }\n    }\n\n    const processedItems: number[] = [];\n    \n    for (let i = 0; i < this.syncQueue.length; i++) {\n      const item = this.syncQueue[i];\n      try {\n        await fetch(item.url, {\n          method: item.method,\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${await import('./firebase').then(m => m.getAuthToken())}`\n          },\n          body: item.data ? JSON.stringify(item.data) : undefined\n        });\n        \n        processedItems.push(i);\n      } catch (error) {\n        console.error('Sync failed for item:', item, error);\n        break; // Stop processing on error\n      }\n    }\n    \n    // Remove processed items\n    processedItems.reverse().forEach(index => {\n      this.syncQueue.splice(index, 1);\n    });\n    \n    // Update cached queue\n    await offlineCache.set('syncQueue', this.syncQueue);\n  }\n}\n\nexport const syncService = new SyncService();\n\n// Auto-sync when coming back online\nwindow.addEventListener('online', () => {\n  syncService.processSyncQueue();\n});\n","size_bytes":4869},"client/src/components/auth/AuthProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User } from 'firebase/auth';\nimport { onAuthChange, handleGoogleRedirect } from '@/services/firebase';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Handle Google OAuth redirect on page load\n    handleGoogleRedirect().catch(console.error);\n\n    // Listen for auth state changes\n    const unsubscribe = onAuthChange((user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":1186},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { signInWithEmail, signUpWithEmail, signInWithGoogle } from '@/services/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function LoginForm() {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleEmailAuth = async (email: string, password: string, isSignUp: boolean) => {\n    setLoading(true);\n    try {\n      if (isSignUp) {\n        await signUpWithEmail(email, password);\n        toast({\n          title: \"Account created successfully\",\n          description: \"Welcome to AI Career Advisor!\",\n        });\n      } else {\n        await signInWithEmail(email, password);\n        toast({\n          title: \"Signed in successfully\",\n          description: \"Welcome back!\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Authentication failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleAuth = async () => {\n    setLoading(true);\n    try {\n      await signInWithGoogle();\n      // Redirect will happen automatically\n    } catch (error: any) {\n      toast({\n        title: \"Google sign-in failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-graduation-cap text-primary-foreground text-lg\"></i>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">AI Career Advisor</CardTitle>\n          <p className=\"text-muted-foreground\">\n            Discover your perfect career path with AI-powered guidance\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"signin\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"signin\" className=\"space-y-4\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const formData = new FormData(e.currentTarget);\n                  const email = formData.get('email') as string;\n                  const password = formData.get('password') as string;\n                  handleEmailAuth(email, password, false);\n                }}\n                className=\"space-y-4\"\n              >\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-email\">Email</Label>\n                  <Input\n                    id=\"signin-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    required\n                    data-testid=\"input-signin-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-password\">Password</Label>\n                  <Input\n                    id=\"signin-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-signin-password\"\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-signin\"\n                >\n                  {loading ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"signup\" className=\"space-y-4\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const formData = new FormData(e.currentTarget);\n                  const email = formData.get('email') as string;\n                  const password = formData.get('password') as string;\n                  handleEmailAuth(email, password, true);\n                }}\n                className=\"space-y-4\"\n              >\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input\n                    id=\"signup-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    required\n                    data-testid=\"input-signup-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input\n                    id=\"signup-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    required\n                    data-testid=\"input-signup-password\"\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-signup\"\n                >\n                  {loading ? 'Creating Account...' : 'Create Account'}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n          \n          <div className=\"mt-6\">\n            <Separator />\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleGoogleAuth}\n              disabled={loading}\n              className=\"w-full mt-4\"\n              data-testid=\"button-google-signin\"\n            >\n              <i className=\"fab fa-google mr-2\"></i>\n              Continue with Google\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7026},"client/src/components/dashboard/CareerDetailModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface CareerMatch {\n  id: string;\n  title: string;\n  description: string;\n  compatibilityScore: number;\n  salaryRange: {\n    min: number;\n    max: number;\n    currency: string;\n  };\n  skills: Array<{\n    name: string;\n    level: string;\n    category: string;\n  }>;\n  industry: string;\n  locations: string[];\n  growthPath?: Array<{\n    level: string;\n    title: string;\n    salaryRange: { min: number; max: number };\n    experience: string;\n  }>;\n  requirements?: string[];\n}\n\ninterface CareerDetailModalProps {\n  career: CareerMatch;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CareerDetailModal({ career, isOpen, onClose }: CareerDetailModalProps) {\n  const getCareerIcon = (title: string) => {\n    if (title.toLowerCase().includes('developer') || title.toLowerCase().includes('software')) {\n      return 'fas fa-laptop-code';\n    }\n    if (title.toLowerCase().includes('data') || title.toLowerCase().includes('analyst')) {\n      return 'fas fa-chart-bar';\n    }\n    if (title.toLowerCase().includes('ai') || title.toLowerCase().includes('ml')) {\n      return 'fas fa-robot';\n    }\n    return 'fas fa-briefcase';\n  };\n\n  const formatSalary = (salaryRange: { min: number; max: number }) => {\n    return `‚Çπ${salaryRange.min}-${salaryRange.max} LPA`;\n  };\n\n  const getSkillsByCategory = (category: string) => {\n    return career.skills.filter(skill => skill.category === category);\n  };\n\n  const getSkillLevelColor = (level: string) => {\n    switch (level.toLowerCase()) {\n      case 'expert':\n        return 'text-chart-2';\n      case 'advanced':\n        return 'text-accent';\n      case 'intermediate':\n        return 'text-primary';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"career-detail-modal\">\n        <DialogHeader className=\"flex flex-row items-start justify-between space-y-0 pb-6\">\n          <div className=\"flex items-start space-x-4 flex-1\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center\">\n              <i className={`${getCareerIcon(career.title)} text-primary text-xl`}></i>\n            </div>\n            <div className=\"flex-1\">\n              <DialogTitle className=\"text-2xl font-bold mb-2\">{career.title}</DialogTitle>\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"text-lg font-semibold text-chart-2\">\n                    {Math.round(career.compatibilityScore)}%\n                  </span>\n                  <span className=\"text-muted-foreground\">compatibility</span>\n                </div>\n                <span className=\"text-lg font-semibold\">\n                  {formatSalary(career.salaryRange)}\n                </span>\n                {career.locations.length > 0 && (\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fas fa-map-marker-alt text-muted-foreground\"></i>\n                    <span className=\"text-muted-foreground\">\n                      {career.locations.slice(0, 2).join(', ')}\n                      {career.locations.length > 2 && ` +${career.locations.length - 2} more`}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"grid md:grid-cols-2 gap-8\">\n          <div>\n            <h4 className=\"font-semibold mb-4\">Role Overview</h4>\n            <p className=\"text-muted-foreground mb-6\">\n              {career.description}\n            </p>\n            \n            {career.requirements && (\n              <>\n                <h4 className=\"font-semibold mb-4\">Key Responsibilities</h4>\n                <ul className=\"space-y-2 text-muted-foreground mb-6\">\n                  {career.requirements.slice(0, 4).map((requirement, index) => (\n                    <li key={index} className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-chart-2 mt-1 text-sm\"></i>\n                      <span className=\"text-sm\">{requirement}</span>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Required Skills</h4>\n            <div className=\"space-y-4 mb-6\">\n              {['technical', 'soft', 'domain'].map(category => {\n                const categorySkills = getSkillsByCategory(category);\n                if (categorySkills.length === 0) return null;\n                \n                return (\n                  <div key={category} className=\"p-3 border border-border rounded-lg\">\n                    <h5 className=\"font-medium text-sm mb-2 capitalize\">{category} Skills</h5>\n                    <div className=\"space-y-1\">\n                      {categorySkills.slice(0, 4).map((skill, index) => (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span>{skill.name}</span>\n                          <span className={getSkillLevelColor(skill.level)}>\n                            {skill.level}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            \n            {career.growthPath && (\n              <>\n                <h4 className=\"font-semibold mb-4\">Career Growth</h4>\n                <div className=\"space-y-2 text-sm\">\n                  {career.growthPath.map((path, index) => (\n                    <div \n                      key={index} \n                      className={`flex items-center justify-between p-2 rounded-lg ${\n                        path.title === career.title \n                          ? 'bg-primary/10 border border-primary/20' \n                          : 'bg-secondary/30'\n                      }`}\n                    >\n                      <span className={path.title === career.title ? 'font-medium' : ''}>\n                        {path.title}\n                      </span>\n                      <span className={path.title === career.title ? 'font-medium' : 'text-muted-foreground'}>\n                        {formatSalary(path.salaryRange)}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-4 mt-8 pt-6 border-t border-border\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-modal\">\n            Close\n          </Button>\n          <Button data-testid=\"button-start-roadmap\">\n            Start Roadmap\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7176},"client/src/components/dashboard/CareerMatches.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useState } from 'react';\nimport { CareerDetailModal } from './CareerDetailModal';\n\ninterface CareerMatch {\n  id: string;\n  title: string;\n  description: string;\n  compatibilityScore: number;\n  salaryRange: {\n    min: number;\n    max: number;\n    currency: string;\n  };\n  skills: Array<{\n    name: string;\n    level: string;\n  }>;\n  industry: string;\n  locations: string[];\n}\n\nexport function CareerMatches() {\n  const [selectedCareer, setSelectedCareer] = useState<CareerMatch | null>(null);\n  \n  const { data: matches, isLoading } = useQuery({\n    queryKey: ['/api/match'],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold\">Your Career Matches</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"flex items-start space-x-4 p-4 border border-border rounded-lg\">\n              <div className=\"w-12 h-12 bg-muted rounded-lg animate-pulse\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded animate-pulse w-3/4\"></div>\n                <div className=\"h-3 bg-muted rounded animate-pulse w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getCareerIcon = (title: string) => {\n    if (title.toLowerCase().includes('developer') || title.toLowerCase().includes('software')) {\n      return 'fas fa-laptop-code';\n    }\n    if (title.toLowerCase().includes('data') || title.toLowerCase().includes('analyst')) {\n      return 'fas fa-chart-bar';\n    }\n    if (title.toLowerCase().includes('ai') || title.toLowerCase().includes('ml')) {\n      return 'fas fa-robot';\n    }\n    return 'fas fa-briefcase';\n  };\n\n  const formatSalary = (salaryRange: CareerMatch['salaryRange']) => {\n    return `‚Çπ${salaryRange.min}-${salaryRange.max} LPA`;\n  };\n\n  return (\n    <>\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold\">Your Career Matches</h2>\n          <Button variant=\"ghost\" className=\"text-primary hover:underline font-medium\" data-testid=\"button-view-all-matches\">\n            View All\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {Array.isArray(matches) ? matches.slice(0, 3).map((match: CareerMatch) => (\n            <div\n              key={match.id}\n              onClick={() => setSelectedCareer(match)}\n              className=\"flex items-start space-x-4 p-4 border border-border rounded-lg hover:bg-secondary/30 transition-colors cursor-pointer\"\n              data-testid={`career-match-${match.id}`}\n            >\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className={`${getCareerIcon(match.title)} text-primary`}></i>\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h3 className=\"font-semibold\">{match.title}</h3>\n                  <div className=\"flex items-center space-x-1\">\n                    <span className=\"text-sm font-medium text-chart-2\">\n                      {Math.round(match.compatibilityScore)}%\n                    </span>\n                    <span className=\"text-sm text-muted-foreground\">match</span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                  {match.description}\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {match.skills.slice(0, 3).map((skill, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"text-xs bg-primary/10 text-primary\"\n                      >\n                        {skill.name}\n                      </Badge>\n                    ))}\n                    {match.skills.length > 3 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{match.skills.length - 3} more\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">\n                    {formatSalary(match.salaryRange)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )) : null}\n          \n          {(!matches || !Array.isArray(matches) || matches.length === 0) && (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-search text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"font-semibold mb-2\">No career matches yet</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Complete your profile to get personalized career recommendations\n              </p>\n              <Button>Complete Profile</Button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {selectedCareer && (\n        <CareerDetailModal\n          career={selectedCareer}\n          isOpen={!!selectedCareer}\n          onClose={() => setSelectedCareer(null)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":5779},"client/src/components/dashboard/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { CareerMatches } from './CareerMatches';\nimport { RoadmapProgress } from './RoadmapProgress';\nimport { ProfileSummary } from './ProfileSummary';\nimport { LearningResources } from './LearningResources';\nimport { RecentActivity } from './RecentActivity';\nimport { useAuth } from '@/components/auth/AuthProvider';\n\nexport function Dashboard() {\n  const { user } = useAuth();\n  \n  const { data: profile } = useQuery({\n    queryKey: ['/api/profile'],\n    enabled: !!user,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/profile/stats'],\n    enabled: !!user,\n  });\n\n  return (\n    <main className=\"py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"dashboard-welcome\">\n            Welcome back, {profile?.name?.split(' ')[0] || 'there'}!\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Here's your career journey overview and personalized recommendations.\n          </p>\n        </div>\n        \n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <div className=\"bg-card p-6 rounded-xl border border-border\" data-testid=\"stat-career-matches\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Career Matches</p>\n                <p className=\"text-2xl font-bold\">{stats?.careerMatches || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-bullseye text-primary\"></i>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-card p-6 rounded-xl border border-border\" data-testid=\"stat-roadmap-progress\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Roadmap Progress</p>\n                <p className=\"text-2xl font-bold\">{stats?.roadmapProgress || 0}%</p>\n              </div>\n              <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-route text-chart-2\"></i>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-card p-6 rounded-xl border border-border\" data-testid=\"stat-skills-acquired\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Skills Acquired</p>\n                <p className=\"text-2xl font-bold\">{stats?.skillsAcquired || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-trophy text-accent\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Main Content Grid */}\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Left Column */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            <CareerMatches />\n            <RoadmapProgress />\n          </div>\n          \n          {/* Right Sidebar */}\n          <div className=\"space-y-8\">\n            <ProfileSummary />\n            <LearningResources />\n            <RecentActivity />\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","size_bytes":3593},"client/src/components/dashboard/LearningResources.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\n\ninterface LearningResource {\n  id: string;\n  title: string;\n  description: string;\n  type: 'course' | 'article' | 'project' | 'certification';\n  provider: string;\n  rating: number;\n  duration: string;\n}\n\nexport function LearningResources() {\n  const { data: resources, isLoading } = useQuery({\n    queryKey: ['/api/learning-resources'],\n    staleTime: 10 * 60 * 1000, // Cache for 10 minutes\n  });\n\n  const getResourceIcon = (type: string) => {\n    switch (type) {\n      case 'course':\n        return 'fas fa-play';\n      case 'article':\n        return 'fas fa-book';\n      case 'project':\n        return 'fas fa-code';\n      case 'certification':\n        return 'fas fa-certificate';\n      default:\n        return 'fas fa-book';\n    }\n  };\n\n  const getResourceIconColor = (type: string) => {\n    switch (type) {\n      case 'course':\n        return 'text-primary';\n      case 'article':\n        return 'text-accent';\n      case 'project':\n        return 'text-chart-2';\n      case 'certification':\n        return 'text-chart-2';\n      default:\n        return 'text-primary';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <h2 className=\"text-xl font-semibold mb-6\">Recommended Learning</h2>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"flex items-start space-x-3 p-3 border border-border rounded-lg\">\n              <div className=\"w-10 h-10 bg-muted rounded-lg animate-pulse\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded animate-pulse w-3/4\"></div>\n                <div className=\"h-3 bg-muted rounded animate-pulse w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card p-6 rounded-xl border border-border\">\n      <h2 className=\"text-xl font-semibold mb-6\">Recommended Learning</h2>\n      \n      <div className=\"space-y-4\">\n        {resources?.slice(0, 3).map((resource: LearningResource) => (\n          <div \n            key={resource.id}\n            className=\"flex items-start space-x-3 p-3 border border-border rounded-lg hover:bg-secondary/30 transition-colors cursor-pointer\"\n            data-testid={`learning-resource-${resource.id}`}\n          >\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <i className={`${getResourceIcon(resource.type)} ${getResourceIconColor(resource.type)} text-sm`}></i>\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-sm mb-1\">{resource.title}</h4>\n              <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                {resource.description}\n              </p>\n              <div className=\"flex items-center space-x-3 text-xs\">\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"text-chart-2\">{resource.rating.toFixed(1)} ‚òÖ</span>\n                </div>\n                <span className=\"text-muted-foreground\">{resource.duration}</span>\n                <span className=\"text-muted-foreground\">by {resource.provider}</span>\n              </div>\n            </div>\n          </div>\n        )) || (\n          <div className=\"text-center py-4\">\n            <i className=\"fas fa-book-open text-3xl text-muted-foreground mb-3\"></i>\n            <p className=\"text-sm text-muted-foreground\">\n              Complete your profile to get personalized learning recommendations\n            </p>\n          </div>\n        )}\n      </div>\n      \n      <Button \n        variant=\"ghost\" \n        className=\"w-full mt-4 text-primary hover:underline font-medium text-sm\"\n        data-testid=\"button-view-all-resources\"\n      >\n        View All Recommendations\n      </Button>\n    </div>\n  );\n}\n","size_bytes":4067},"client/src/components/dashboard/ProfileSummary.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { useAuth } from '@/components/auth/AuthProvider';\n\nexport function ProfileSummary() {\n  const { user } = useAuth();\n  \n  const { data: profile, isLoading } = useQuery({\n    queryKey: ['/api/profile'],\n    enabled: !!user,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <h2 className=\"text-xl font-semibold mb-6\">Profile Overview</h2>\n        <div className=\"text-center mb-6\">\n          <div className=\"w-20 h-20 rounded-full mx-auto mb-4 bg-muted animate-pulse\"></div>\n          <div className=\"h-4 bg-muted rounded animate-pulse mb-2\"></div>\n          <div className=\"h-3 bg-muted rounded animate-pulse w-1/2 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const getProfilePicture = () => {\n    if (profile?.profilePicture) return profile.profilePicture;\n    if (user?.photoURL) return user.photoURL;\n    return \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200&q=80\";\n  };\n\n  return (\n    <div className=\"bg-card p-6 rounded-xl border border-border\">\n      <h2 className=\"text-xl font-semibold mb-6\">Profile Overview</h2>\n      \n      <div className=\"text-center mb-6\">\n        <img \n          src={getProfilePicture()}\n          alt=\"Profile picture\" \n          className=\"w-20 h-20 rounded-full mx-auto mb-4 object-cover\"\n          data-testid=\"profile-picture\"\n        />\n        <h3 className=\"font-semibold\" data-testid=\"profile-name\">\n          {profile?.name || user?.displayName || 'User'}\n        </h3>\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"profile-title\">\n          {profile?.title || 'Professional'}\n        </p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium mb-2\">Top Skills</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {profile?.skills?.slice(0, 4).map((skill: any, index: number) => (\n              <Badge\n                key={index}\n                variant=\"secondary\"\n                className=\"text-xs bg-primary/10 text-primary\"\n                data-testid={`skill-${index}`}\n              >\n                {skill.name}\n              </Badge>\n            )) || (\n              <p className=\"text-xs text-muted-foreground\">No skills added yet</p>\n            )}\n          </div>\n        </div>\n        \n        <div>\n          <h4 className=\"font-medium mb-2\">Profile Completion</h4>\n          <div className=\"w-full bg-secondary rounded-full h-2 mb-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${profile?.completionPercentage || 0}%` }}\n              data-testid=\"completion-progress\"\n            ></div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            {profile?.completionPercentage || 0}% complete\n            {profile?.completionPercentage < 100 && ' ‚Ä¢ Add more details to improve matches'}\n          </p>\n        </div>\n        \n        {profile?.resumeUrl && (\n          <div className=\"pt-4 border-t border-border\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">Resume</span>\n              <i className=\"fas fa-check-circle text-chart-2\" data-testid=\"resume-status\"></i>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Resume uploaded and processed</p>\n          </div>\n        )}\n      </div>\n      \n      <Button \n        variant=\"secondary\" \n        className=\"w-full mt-6\"\n        data-testid=\"button-edit-profile\"\n      >\n        Edit Profile\n      </Button>\n    </div>\n  );\n}\n","size_bytes":3895},"client/src/components/dashboard/RecentActivity.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\n\ninterface Activity {\n  id: string;\n  type: 'completion' | 'upload' | 'achievement' | 'roadmap_start';\n  title: string;\n  timestamp: string;\n}\n\nexport function RecentActivity() {\n  const { data: activities, isLoading } = useQuery({\n    queryKey: ['/api/profile/activity'],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'completion':\n        return 'bg-primary';\n      case 'upload':\n        return 'bg-chart-2';\n      case 'achievement':\n        return 'bg-accent';\n      case 'roadmap_start':\n        return 'bg-muted';\n      default:\n        return 'bg-muted';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `${diffInMinutes} minutes ago`;\n    } else if (diffInMinutes < 1440) {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    } else {\n      const days = Math.floor(diffInMinutes / 1440);\n      return `${days} day${days > 1 ? 's' : ''} ago`;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <h2 className=\"text-xl font-semibold mb-6\">Recent Activity</h2>\n        <div className=\"space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"flex items-start space-x-3\">\n              <div className=\"w-2 h-2 bg-muted rounded-full mt-2 animate-pulse\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-3 bg-muted rounded animate-pulse\"></div>\n                <div className=\"h-2 bg-muted rounded animate-pulse w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card p-6 rounded-xl border border-border\">\n      <h2 className=\"text-xl font-semibold mb-6\">Recent Activity</h2>\n      \n      <div className=\"space-y-4\">\n        {activities?.slice(0, 4).map((activity: Activity) => (\n          <div key={activity.id} className=\"flex items-start space-x-3\" data-testid={`activity-${activity.id}`}>\n            <div className={`w-2 h-2 ${getActivityIcon(activity.type)} rounded-full mt-2`}></div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm\">{activity.title}</p>\n              <p className=\"text-xs text-muted-foreground\">\n                {formatTimeAgo(activity.timestamp)}\n              </p>\n            </div>\n          </div>\n        )) || (\n          <div className=\"text-center py-4\">\n            <i className=\"fas fa-clock text-3xl text-muted-foreground mb-3\"></i>\n            <p className=\"text-sm text-muted-foreground\">\n              No recent activity yet\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3010},"client/src/components/dashboard/RoadmapProgress.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  skills: string[];\n  estimatedTime: string;\n  order: number;\n  status: 'not_started' | 'in_progress' | 'completed';\n  progress?: number;\n}\n\ninterface RoadmapData {\n  id: string;\n  title: string;\n  description: string;\n  milestones: Milestone[];\n  totalProgress: number;\n}\n\nexport function RoadmapProgress() {\n  const { data: roadmap, isLoading } = useQuery({\n    queryKey: ['/api/roadmap/current'],\n    staleTime: 2 * 60 * 1000, // Cache for 2 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold\">Current Roadmap</h2>\n        </div>\n        <div className=\"space-y-6\">\n          <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-start space-x-4\">\n                <div className=\"w-3 h-3 bg-muted rounded-full mt-2 animate-pulse\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                  <div className=\"h-3 bg-muted rounded animate-pulse w-3/4\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!roadmap) {\n    return (\n      <div className=\"bg-card p-6 rounded-xl border border-border\">\n        <div className=\"text-center py-8\">\n          <i className=\"fas fa-route text-4xl text-muted-foreground mb-4\"></i>\n          <h3 className=\"font-semibold mb-2\">No active roadmap</h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Start a career roadmap to track your learning progress\n          </p>\n          <Button data-testid=\"button-start-roadmap\">Start a Roadmap</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getMilestoneIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'w-3 h-3 bg-chart-2 rounded-full mt-2 relative z-10';\n      case 'in_progress':\n        return 'w-3 h-3 bg-primary rounded-full mt-2 relative z-10';\n      default:\n        return 'w-3 h-3 bg-muted rounded-full mt-2 relative z-10';\n    }\n  };\n\n  const getMilestoneColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'text-chart-2';\n      case 'in_progress':\n        return 'text-foreground';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"bg-card p-6 rounded-xl border border-border\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold\">Current Roadmap: {roadmap.title}</h2>\n        <Button variant=\"ghost\" className=\"text-primary hover:underline font-medium\" data-testid=\"button-view-roadmap-details\">\n          View Details\n        </Button>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {/* Overall Progress */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Overall Progress</span>\n            <span className=\"text-sm font-medium\">{Math.round(roadmap.totalProgress)}%</span>\n          </div>\n          <Progress value={roadmap.totalProgress} className=\"h-2\" />\n        </div>\n\n        {/* Roadmap Timeline */}\n        <div className=\"relative\">\n          {/* Progress Line */}\n          <div className=\"absolute left-6 top-8 bottom-0 w-0.5 bg-border\"></div>\n          <div \n            className=\"absolute left-6 top-8 w-0.5 bg-primary transition-all duration-500\"\n            style={{ height: `${(roadmap.totalProgress / 100) * 100}px` }}\n          ></div>\n          \n          {/* Milestones */}\n          <div className=\"space-y-8\">\n            {roadmap.milestones.slice(0, 4).map((milestone: Milestone, index: number) => (\n              <div key={milestone.id} className=\"flex items-start space-x-4\" data-testid={`milestone-${index}`}>\n                <div className={getMilestoneIcon(milestone.status)}></div>\n                <div className=\"flex-1\">\n                  <h3 className={`font-semibold ${getMilestoneColor(milestone.status)}`}>\n                    {milestone.title}\n                    {milestone.status === 'completed' && ' ‚úì'}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    {milestone.description}\n                  </p>\n                  \n                  {milestone.status === 'in_progress' && milestone.progress && (\n                    <div className=\"mb-3\">\n                      <div className=\"w-full bg-secondary rounded-full h-2 mb-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                          style={{ width: `${milestone.progress}%` }}\n                        ></div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs text-muted-foreground\">Progress:</span>\n                        <span className=\"text-xs font-medium\">{milestone.progress}% completed</span>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {milestone.skills.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mb-2\">\n                      {milestone.skills.slice(0, 3).map((skill, skillIndex) => (\n                        <Badge\n                          key={skillIndex}\n                          variant=\"secondary\"\n                          className=\"text-xs bg-primary/10 text-primary\"\n                        >\n                          {skill}\n                        </Badge>\n                      ))}\n                      {milestone.skills.length > 3 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{milestone.skills.length - 3} more\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                    <span>\n                      <i className=\"fas fa-clock mr-1\"></i>\n                      {milestone.estimatedTime}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6848},"client/src/components/onboarding/OnboardingWizard.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { uploadResumeFile } from '@/services/firebase';\nimport { useAuth } from '@/components/auth/AuthProvider';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface OnboardingData {\n  name: string;\n  title: string;\n  location: string;\n  experience: string;\n  education: {\n    degree: string;\n    field: string;\n    institution: string;\n    year: number;\n  }[];\n  interests: string[];\n  bio: string;\n  resumeFile?: File;\n}\n\nconst INTERESTS = [\n  { id: 'technology', name: 'Technology', icon: 'fas fa-code', description: 'Software development, AI, cybersecurity' },\n  { id: 'business', name: 'Business', icon: 'fas fa-chart-line', description: 'Management, analytics, consulting' },\n  { id: 'creative', name: 'Creative', icon: 'fas fa-palette', description: 'Design, content, media' },\n  { id: 'healthcare', name: 'Healthcare', icon: 'fas fa-stethoscope', description: 'Medicine, research, therapy' },\n  { id: 'education', name: 'Education', icon: 'fas fa-graduation-cap', description: 'Teaching, training, curriculum' },\n  { id: 'finance', name: 'Finance', icon: 'fas fa-building', description: 'Banking, investing, accounting' },\n];\n\nconst EXPERIENCE_OPTIONS = [\n  { value: 'fresher', label: 'Fresh Graduate' },\n  { value: '0-2', label: '0-2 years' },\n  { value: '2-5', label: '2-5 years' },\n  { value: '5-10', label: '5-10 years' },\n  { value: '10+', label: '10+ years' },\n];\n\ninterface OnboardingWizardProps {\n  onComplete: () => void;\n}\n\nexport function OnboardingWizard({ onComplete }: OnboardingWizardProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<OnboardingData>({\n    name: user?.displayName || '',\n    title: '',\n    location: '',\n    experience: '',\n    education: [{ degree: '', field: '', institution: '', year: new Date().getFullYear() }],\n    interests: [],\n    bio: '',\n  });\n\n  const totalSteps = 4;\n  const progress = (step / totalSteps) * 100;\n\n  const updateData = (updates: Partial<OnboardingData>) => {\n    setData({ ...data, ...updates });\n  };\n\n  const toggleInterest = (interest: string) => {\n    const newInterests = data.interests.includes(interest)\n      ? data.interests.filter(i => i !== interest)\n      : [...data.interests, interest];\n    updateData({ interests: newInterests });\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        updateData({ resumeFile: file });\n      } else {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a PDF or Word document\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const nextStep = () => {\n    if (step < totalSteps) setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    if (step > 1) setStep(step - 1);\n  };\n\n  const handleComplete = async () => {\n    setLoading(true);\n    try {\n      let resumeUrl = '';\n      \n      // Upload resume if provided\n      if (data.resumeFile && user) {\n        resumeUrl = await uploadResumeFile(data.resumeFile, user.uid);\n        toast({\n          title: \"Resume uploaded successfully\",\n          description: \"Your resume is being processed...\",\n        });\n      }\n\n      // Create profile\n      await apiRequest('POST', '/api/profile', {\n        ...data,\n        resumeUrl,\n        userId: user?.uid,\n      });\n\n      toast({\n        title: \"Profile created successfully\",\n        description: \"Welcome to AI Career Advisor!\",\n      });\n\n      onComplete();\n    } catch (error: any) {\n      toast({\n        title: \"Failed to create profile\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold mb-2\">Tell us about yourself</h2>\n              <p className=\"text-muted-foreground\">Let's start with some basic information</p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  value={data.name}\n                  onChange={(e) => updateData({ name: e.target.value })}\n                  placeholder=\"Enter your full name\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Current Title/Status</Label>\n                <Input\n                  id=\"title\"\n                  value={data.title}\n                  onChange={(e) => updateData({ title: e.target.value })}\n                  placeholder=\"e.g., Computer Science Student, Software Developer\"\n                  data-testid=\"input-title\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input\n                  id=\"location\"\n                  value={data.location}\n                  onChange={(e) => updateData({ location: e.target.value })}\n                  placeholder=\"e.g., Mumbai, India\"\n                  data-testid=\"input-location\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"experience\">Experience Level</Label>\n                <Select value={data.experience} onValueChange={(value) => updateData({ experience: value })}>\n                  <SelectTrigger data-testid=\"select-experience\">\n                    <SelectValue placeholder=\"Select your experience level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {EXPERIENCE_OPTIONS.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold mb-2\">Tell us about your interests</h2>\n              <p className=\"text-muted-foreground\">Select areas that excite you most to get personalized career recommendations</p>\n            </div>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {INTERESTS.map((interest) => (\n                <div\n                  key={interest.id}\n                  onClick={() => toggleInterest(interest.id)}\n                  className={`p-6 border rounded-xl cursor-pointer transition-all ${\n                    data.interests.includes(interest.id)\n                      ? 'border-primary bg-primary/5'\n                      : 'border-border hover:border-primary'\n                  }`}\n                  data-testid={`interest-${interest.id}`}\n                >\n                  <div className=\"text-center\">\n                    <i className={`${interest.icon} text-3xl text-primary mb-4`}></i>\n                    <h3 className=\"font-semibold mb-2\">{interest.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{interest.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold mb-2\">Education Background</h2>\n              <p className=\"text-muted-foreground\">Help us understand your academic background</p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"degree\">Degree</Label>\n                  <Input\n                    id=\"degree\"\n                    value={data.education[0].degree}\n                    onChange={(e) => {\n                      const newEducation = [...data.education];\n                      newEducation[0].degree = e.target.value;\n                      updateData({ education: newEducation });\n                    }}\n                    placeholder=\"e.g., B.Tech, MBA, B.Sc\"\n                    data-testid=\"input-degree\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"field\">Field of Study</Label>\n                  <Input\n                    id=\"field\"\n                    value={data.education[0].field}\n                    onChange={(e) => {\n                      const newEducation = [...data.education];\n                      newEducation[0].field = e.target.value;\n                      updateData({ education: newEducation });\n                    }}\n                    placeholder=\"e.g., Computer Science, Business Administration\"\n                    data-testid=\"input-field\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"institution\">Institution</Label>\n                <Input\n                  id=\"institution\"\n                  value={data.education[0].institution}\n                  onChange={(e) => {\n                    const newEducation = [...data.education];\n                    newEducation[0].institution = e.target.value;\n                    updateData({ education: newEducation });\n                  }}\n                  placeholder=\"e.g., IIT Delhi, Delhi University\"\n                  data-testid=\"input-institution\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"year\">Graduation Year</Label>\n                <Input\n                  id=\"year\"\n                  type=\"number\"\n                  value={data.education[0].year}\n                  onChange={(e) => {\n                    const newEducation = [...data.education];\n                    newEducation[0].year = parseInt(e.target.value);\n                    updateData({ education: newEducation });\n                  }}\n                  placeholder=\"e.g., 2024\"\n                  data-testid=\"input-year\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bio\">Brief Bio</Label>\n                <Textarea\n                  id=\"bio\"\n                  value={data.bio}\n                  onChange={(e) => updateData({ bio: e.target.value })}\n                  placeholder=\"Tell us a bit about yourself, your goals, and what you're passionate about...\"\n                  rows={4}\n                  data-testid=\"textarea-bio\"\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold mb-2\">Upload Your Resume (Optional)</h2>\n              <p className=\"text-muted-foreground\">Upload your resume for better career matching and skill analysis</p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"resume\">Resume File (PDF, DOC, DOCX)</Label>\n                <Input\n                  id=\"resume\"\n                  type=\"file\"\n                  accept=\".pdf,.doc,.docx\"\n                  onChange={handleFileUpload}\n                  className=\"cursor-pointer\"\n                  data-testid=\"input-resume\"\n                />\n                {data.resumeFile && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Selected: {data.resumeFile.name}\n                  </p>\n                )}\n              </div>\n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">Why upload your resume?</h3>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>‚Ä¢ Better career matching based on your experience</li>\n                  <li>‚Ä¢ Automatic skill extraction and analysis</li>\n                  <li>‚Ä¢ Personalized roadmap recommendations</li>\n                  <li>‚Ä¢ Track your progress over time</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-muted/30 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            {/* Progress Indicator */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <span className=\"text-sm font-medium text-muted-foreground\">\n                  Step {step} of {totalSteps}\n                </span>\n                <span className=\"text-sm font-medium text-muted-foreground\">\n                  {Math.round(progress)}% Complete\n                </span>\n              </div>\n              <Progress value={progress} className=\"h-2\" data-testid=\"progress-bar\" />\n            </div>\n\n            <div className=\"max-w-2xl mx-auto\">\n              {renderStep()}\n\n              <div className=\"flex justify-between pt-8\">\n                <Button\n                  variant=\"outline\"\n                  onClick={prevStep}\n                  disabled={step === 1}\n                  data-testid=\"button-back\"\n                >\n                  Back\n                </Button>\n                \n                {step === totalSteps ? (\n                  <Button\n                    onClick={handleComplete}\n                    disabled={loading || !data.name || !data.title}\n                    data-testid=\"button-complete\"\n                  >\n                    {loading ? 'Creating Profile...' : 'Complete Setup'}\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={nextStep}\n                    disabled={\n                      (step === 1 && (!data.name || !data.title)) ||\n                      (step === 2 && data.interests.length === 0)\n                    }\n                    data-testid=\"button-next\"\n                  >\n                    Continue\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15373},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/firebase.ts":{"content":"import { storage } from './firebaseAdmin';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Check if Firebase services are initialized\n * @returns boolean - Whether Firebase is initialized\n */\nexport function isFirebaseInitialized(): boolean {\n  return storage !== null;\n}\n\n/**\n * Upload a resume file to Firebase Storage\n * @param buffer - The file buffer to upload\n * @param contentType - The MIME type of the file\n * @param originalName - The original filename\n * @param userId - The user's Firebase UID\n * @returns Promise<string> - The signed URL of the uploaded file\n */\nexport async function uploadResumeFile(buffer: Buffer, contentType: string, originalName: string, userId: string): Promise<string> {\n  try {\n    if (!isFirebaseInitialized()) {\n      console.warn('Firebase not initialized. Cannot upload resume file.');\n      throw new Error('File upload service not available. Please try again later.');\n    }\n    \n    // Generate a unique filename\n    const fileExtension = originalName.split('.').pop() || 'pdf';\n    const fileName = `resumes/${userId}/${uuidv4()}.${fileExtension}`;\n    \n    // Get a reference to the Firebase Storage bucket\n    const bucket = storage!.bucket();\n    const fileRef = bucket.file(fileName);\n    \n    // Upload the file\n    await fileRef.save(buffer, {\n      metadata: {\n        contentType: contentType,\n        metadata: {\n          uploadedBy: userId,\n          originalName: originalName,\n        },\n      },\n    });\n    \n    // Generate a signed URL for secure access (expires in 1 year)\n    const [signedUrl] = await fileRef.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + 365 * 24 * 60 * 60 * 1000, // 1 year from now\n    });\n    \n    return signedUrl;\n  } catch (error) {\n    console.error('Error uploading resume file:', error);\n    throw new Error('Failed to upload resume file');\n  }\n}\n\n/**\n * Delete a resume file from Firebase Storage\n * @param fileUrl - The URL of the file to delete (either signed URL or file path)\n * @returns Promise<void>\n */\nexport async function deleteResumeFile(fileUrl: string): Promise<void> {\n  try {\n    if (!isFirebaseInitialized()) {\n      console.warn('Firebase not initialized. Cannot delete resume file.');\n      throw new Error('File delete service not available. Please try again later.');\n    }\n    \n    const bucket = storage!.bucket();\n    let filePath: string;\n    \n    // Handle both signed URLs and direct file paths\n    if (fileUrl.includes('storage.googleapis.com')) {\n      const urlParts = fileUrl.split(`https://storage.googleapis.com/${bucket.name}/`);\n      if (urlParts.length !== 2) {\n        throw new Error('Invalid file URL format');\n      }\n      filePath = urlParts[1].split('?')[0]; // Remove query parameters\n    } else {\n      filePath = fileUrl; // Assume it's already a file path\n    }\n    \n    const fileRef = bucket.file(filePath);\n    \n    // Delete the file\n    await fileRef.delete();\n  } catch (error) {\n    console.error('Error deleting resume file:', error);\n    throw new Error('Failed to delete resume file');\n  }\n}","size_bytes":3057}},"version":1}